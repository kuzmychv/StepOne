ARM GAS  /tmp/cctkHiNQ.s 			page 1


   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"main.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.MX_GPIO_Init,"ax",%progbits
  18              		.align	1
  19              		.arch armv7e-m
  20              		.syntax unified
  21              		.thumb
  22              		.thumb_func
  23              		.fpu fpv4-sp-d16
  25              	MX_GPIO_Init:
  26              	.LFB139:
  27              		.file 1 "Core/Src/main.c"
   1:Core/Src/main.c **** /* USER CODE BEGIN Header */
   2:Core/Src/main.c **** /**
   3:Core/Src/main.c ****   ******************************************************************************
   4:Core/Src/main.c ****   * @file           : main.c
   5:Core/Src/main.c ****   * @brief          : Main program body
   6:Core/Src/main.c ****   ******************************************************************************
   7:Core/Src/main.c ****   * @attention
   8:Core/Src/main.c ****   *
   9:Core/Src/main.c ****   * Copyright (c) 2024 STMicroelectronics.
  10:Core/Src/main.c ****   * All rights reserved.
  11:Core/Src/main.c ****   *
  12:Core/Src/main.c ****   * This software is licensed under terms that can be found in the LICENSE file
  13:Core/Src/main.c ****   * in the root directory of this software component.
  14:Core/Src/main.c ****   * If no LICENSE file comes with this software, it is provided AS-IS.
  15:Core/Src/main.c ****   *
  16:Core/Src/main.c ****   ******************************************************************************
  17:Core/Src/main.c ****   */
  18:Core/Src/main.c **** /* USER CODE END Header */
  19:Core/Src/main.c **** /* Includes ------------------------------------------------------------------*/
  20:Core/Src/main.c **** #include "main.h"
  21:Core/Src/main.c **** 
  22:Core/Src/main.c **** /* Private includes ----------------------------------------------------------*/
  23:Core/Src/main.c **** /* USER CODE BEGIN Includes */
  24:Core/Src/main.c **** 
  25:Core/Src/main.c **** #include<string.h>
  26:Core/Src/main.c **** #include<command_line.h>
  27:Core/Src/main.c **** #include<motor.h>
  28:Core/Src/main.c **** 
  29:Core/Src/main.c **** /* USER CODE END Includes */
  30:Core/Src/main.c **** 
  31:Core/Src/main.c **** /* Private typedef -----------------------------------------------------------*/
ARM GAS  /tmp/cctkHiNQ.s 			page 2


  32:Core/Src/main.c **** /* USER CODE BEGIN PTD */
  33:Core/Src/main.c **** 
  34:Core/Src/main.c **** /* USER CODE END PTD */
  35:Core/Src/main.c **** 
  36:Core/Src/main.c **** /* Private define ------------------------------------------------------------*/
  37:Core/Src/main.c **** /* USER CODE BEGIN PD */
  38:Core/Src/main.c **** 
  39:Core/Src/main.c **** 
  40:Core/Src/main.c **** 
  41:Core/Src/main.c **** /* USER CODE END PD */
  42:Core/Src/main.c **** 
  43:Core/Src/main.c **** /* Private macro -------------------------------------------------------------*/
  44:Core/Src/main.c **** /* USER CODE BEGIN PM */
  45:Core/Src/main.c **** 
  46:Core/Src/main.c **** /* USER CODE END PM */
  47:Core/Src/main.c **** 
  48:Core/Src/main.c **** /* Private variables ---------------------------------------------------------*/
  49:Core/Src/main.c **** TIM_HandleTypeDef htim3;
  50:Core/Src/main.c **** 
  51:Core/Src/main.c **** UART_HandleTypeDef huart1;
  52:Core/Src/main.c **** DMA_HandleTypeDef hdma_usart1_rx;
  53:Core/Src/main.c **** DMA_HandleTypeDef hdma_usart1_tx;
  54:Core/Src/main.c **** 
  55:Core/Src/main.c **** /* USER CODE BEGIN PV */
  56:Core/Src/main.c **** 
  57:Core/Src/main.c **** /* USER CODE END PV */
  58:Core/Src/main.c **** 
  59:Core/Src/main.c **** /* Private function prototypes -----------------------------------------------*/
  60:Core/Src/main.c **** void SystemClock_Config(void);
  61:Core/Src/main.c **** static void MX_GPIO_Init(void);
  62:Core/Src/main.c **** static void MX_DMA_Init(void);
  63:Core/Src/main.c **** static void MX_TIM3_Init(void);
  64:Core/Src/main.c **** static void MX_USART1_UART_Init(void);
  65:Core/Src/main.c **** /* USER CODE BEGIN PFP */
  66:Core/Src/main.c **** 
  67:Core/Src/main.c **** /* USER CODE END PFP */
  68:Core/Src/main.c **** 
  69:Core/Src/main.c **** /* Private user code ---------------------------------------------------------*/
  70:Core/Src/main.c **** /* USER CODE BEGIN 0 */
  71:Core/Src/main.c **** 
  72:Core/Src/main.c **** char *user_data = "The application is running\r\n"; //demo data for transmission-
  73:Core/Src/main.c **** char *command;
  74:Core/Src/main.c **** uint8_t data_buffer[100]; // data buffer
  75:Core/Src/main.c **** uint8_t recvd_data; // receive buffer
  76:Core/Src/main.c **** uint32_t count=0; // count how many bytes are received
  77:Core/Src/main.c **** uint8_t command_flag = 0;
  78:Core/Src/main.c **** 
  79:Core/Src/main.c **** 
  80:Core/Src/main.c **** /* USER CODE END 0 */
  81:Core/Src/main.c **** 
  82:Core/Src/main.c **** /**
  83:Core/Src/main.c ****   * @brief  The application entry point.
  84:Core/Src/main.c ****   * @retval int
  85:Core/Src/main.c ****   */
  86:Core/Src/main.c **** int main(void)
  87:Core/Src/main.c **** {
  88:Core/Src/main.c **** 
ARM GAS  /tmp/cctkHiNQ.s 			page 3


  89:Core/Src/main.c ****   /* USER CODE BEGIN 1 */
  90:Core/Src/main.c **** 
  91:Core/Src/main.c ****   /* USER CODE END 1 */
  92:Core/Src/main.c **** 
  93:Core/Src/main.c ****   /* MCU Configuration--------------------------------------------------------*/
  94:Core/Src/main.c **** 
  95:Core/Src/main.c ****   /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  96:Core/Src/main.c ****   HAL_Init();
  97:Core/Src/main.c **** 
  98:Core/Src/main.c ****   /* USER CODE BEGIN Init */
  99:Core/Src/main.c **** 
 100:Core/Src/main.c ****   /* USER CODE END Init */
 101:Core/Src/main.c **** 
 102:Core/Src/main.c ****   /* Configure the system clock */
 103:Core/Src/main.c ****   SystemClock_Config();
 104:Core/Src/main.c **** 
 105:Core/Src/main.c ****   /* USER CODE BEGIN SysInit */
 106:Core/Src/main.c **** 
 107:Core/Src/main.c ****   /* USER CODE END SysInit */
 108:Core/Src/main.c **** 
 109:Core/Src/main.c ****   /* Initialize all configured peripherals */
 110:Core/Src/main.c ****   MX_GPIO_Init();
 111:Core/Src/main.c ****   MX_DMA_Init();
 112:Core/Src/main.c ****   MX_TIM3_Init();
 113:Core/Src/main.c ****   MX_USART1_UART_Init();
 114:Core/Src/main.c ****   /* USER CODE BEGIN 2 */
 115:Core/Src/main.c **** 
 116:Core/Src/main.c ****   			HAL_GPIO_WritePin(GPIOC, GPIO_FL_Pin, GPIO_PIN_RESET);
 117:Core/Src/main.c **** 				HAL_GPIO_WritePin(GPIOC, GPIO_FR_Pin, GPIO_PIN_RESET);
 118:Core/Src/main.c **** 				HAL_GPIO_WritePin(GPIOC, GPIO_BL_Pin, GPIO_PIN_RESET);
 119:Core/Src/main.c **** 				HAL_GPIO_WritePin(GPIOC, GPIO_BR_Pin, GPIO_PIN_RESET);
 120:Core/Src/main.c **** 
 121:Core/Src/main.c ****   HAL_UART_Transmit_IT(&huart1,(uint8_t*)user_data,strlen(user_data)); //Transmit data in interrupt
 122:Core/Src/main.c ****   HAL_UART_Receive_IT(&huart1,&recvd_data,1); //receive data from data buffer interrupt mode
 123:Core/Src/main.c **** 
 124:Core/Src/main.c ****   /* USER CODE END 2 */
 125:Core/Src/main.c **** 
 126:Core/Src/main.c ****   /* Infinite loop */
 127:Core/Src/main.c ****   /* USER CODE BEGIN WHILE */
 128:Core/Src/main.c ****   while (1)
 129:Core/Src/main.c ****   {
 130:Core/Src/main.c ****     /* USER CODE END WHILE */
 131:Core/Src/main.c **** 
 132:Core/Src/main.c ****     /* USER CODE BEGIN 3 */
 133:Core/Src/main.c **** 
 134:Core/Src/main.c ****     if(command_flag){
 135:Core/Src/main.c ****       Get_Command(data_buffer);
 136:Core/Src/main.c ****     }
 137:Core/Src/main.c **** 
 138:Core/Src/main.c **** 
 139:Core/Src/main.c ****     if (GPIO_PIN_SET == HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0)) {
 140:Core/Src/main.c **** 
 141:Core/Src/main.c **** 		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 142:Core/Src/main.c **** 
 143:Core/Src/main.c ****       TIM3 -> CCR1 = 1000;
 144:Core/Src/main.c ****       TIM3 -> CCR2 = 1000;
 145:Core/Src/main.c ****       TIM3 -> CCR3 = 1000;
ARM GAS  /tmp/cctkHiNQ.s 			page 4


 146:Core/Src/main.c ****       TIM3 -> CCR4 = 1000;
 147:Core/Src/main.c **** 
 148:Core/Src/main.c ****       HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_1);
 149:Core/Src/main.c **** 		  HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_2);
 150:Core/Src/main.c **** 		  HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_3);
 151:Core/Src/main.c **** 		  HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_4);
 152:Core/Src/main.c **** 
 153:Core/Src/main.c ****     } else {
 154:Core/Src/main.c **** 
 155:Core/Src/main.c **** 		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 156:Core/Src/main.c **** 
 157:Core/Src/main.c **** 		  HAL_Delay(2000);
 158:Core/Src/main.c **** 
 159:Core/Src/main.c **** 		  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 160:Core/Src/main.c **** 		  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 161:Core/Src/main.c **** 		  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 162:Core/Src/main.c **** 		  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 163:Core/Src/main.c **** 
 164:Core/Src/main.c ****       /*
 165:Core/Src/main.c **** 		  wheelControl(frontright, 8);
 166:Core/Src/main.c **** 		  HAL_Delay(1000);
 167:Core/Src/main.c **** 
 168:Core/Src/main.c **** 		  wheelControl(frontright, 0);
 169:Core/Src/main.c **** 		  HAL_Delay(1000);
 170:Core/Src/main.c **** 
 171:Core/Src/main.c **** 		  wheelControl(backright, 8);
 172:Core/Src/main.c **** 		  HAL_Delay(1000);
 173:Core/Src/main.c **** 
 174:Core/Src/main.c **** 		  wheelControl(backright, 0);
 175:Core/Src/main.c **** 		  HAL_Delay(1000);
 176:Core/Src/main.c **** 
 177:Core/Src/main.c **** 		  wheelControl(frontleft, 8);
 178:Core/Src/main.c **** 		  HAL_Delay(1000);
 179:Core/Src/main.c **** 
 180:Core/Src/main.c **** 		  wheelControl(frontleft, 0);
 181:Core/Src/main.c **** 		  HAL_Delay(1000);
 182:Core/Src/main.c **** 
 183:Core/Src/main.c **** 		  wheelControl(backleft, 8);
 184:Core/Src/main.c **** 		  HAL_Delay(1000);
 185:Core/Src/main.c **** 
 186:Core/Src/main.c **** 		  wheelControl(backleft, 0);
 187:Core/Src/main.c **** 		  HAL_Delay(1000);
 188:Core/Src/main.c **** */
 189:Core/Src/main.c **** 
 190:Core/Src/main.c **** 		  //wheelControl(backleft, 20);
 191:Core/Src/main.c **** //	  TIM3 -> CCR1 = 1000;
 192:Core/Src/main.c **** //	  TIM4 -> CCR1 = 199;
 193:Core/Src/main.c **** 
 194:Core/Src/main.c ****     TIM1 -> CCR2 = 1000;
 195:Core/Src/main.c ****     TIM2 -> CCR2 = 0;
 196:Core/Src/main.c **** 
 197:Core/Src/main.c ****  //   TIM1 -> CCR3 = 1000;
 198:Core/Src/main.c **** //    TIM2 -> CCR3 = 199;
 199:Core/Src/main.c **** 
 200:Core/Src/main.c **** //    TIM1 -> CCR4 = 1000;
 201:Core/Src/main.c **** //    TIM2 -> CCR4 = 199;
 202:Core/Src/main.c **** 
ARM GAS  /tmp/cctkHiNQ.s 			page 5


 203:Core/Src/main.c **** 	  HAL_Delay(4000);
 204:Core/Src/main.c **** 
 205:Core/Src/main.c ****     }
 206:Core/Src/main.c ****   }
 207:Core/Src/main.c ****   /* USER CODE END 3 */
 208:Core/Src/main.c **** }
 209:Core/Src/main.c **** 
 210:Core/Src/main.c **** /**
 211:Core/Src/main.c ****   * @brief System Clock Configuration
 212:Core/Src/main.c ****   * @retval None
 213:Core/Src/main.c ****   */
 214:Core/Src/main.c **** void SystemClock_Config(void)
 215:Core/Src/main.c **** {
 216:Core/Src/main.c ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 217:Core/Src/main.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 218:Core/Src/main.c **** 
 219:Core/Src/main.c ****   /** Configure the main internal regulator output voltage
 220:Core/Src/main.c ****   */
 221:Core/Src/main.c ****   __HAL_RCC_PWR_CLK_ENABLE();
 222:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 223:Core/Src/main.c **** 
 224:Core/Src/main.c ****   /** Initializes the RCC Oscillators according to the specified parameters
 225:Core/Src/main.c ****   * in the RCC_OscInitTypeDef structure.
 226:Core/Src/main.c ****   */
 227:Core/Src/main.c ****   RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 228:Core/Src/main.c ****   RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 229:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 230:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 231:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLM = 25;
 232:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLN = 168;
 233:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 234:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLQ = 4;
 235:Core/Src/main.c ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 236:Core/Src/main.c ****   {
 237:Core/Src/main.c ****     Error_Handler();
 238:Core/Src/main.c ****   }
 239:Core/Src/main.c **** 
 240:Core/Src/main.c ****   /** Initializes the CPU, AHB and APB buses clocks
 241:Core/Src/main.c ****   */
 242:Core/Src/main.c ****   RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 243:Core/Src/main.c ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 244:Core/Src/main.c ****   RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 245:Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 246:Core/Src/main.c ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 247:Core/Src/main.c ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 248:Core/Src/main.c **** 
 249:Core/Src/main.c ****   if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 250:Core/Src/main.c ****   {
 251:Core/Src/main.c ****     Error_Handler();
 252:Core/Src/main.c ****   }
 253:Core/Src/main.c **** }
 254:Core/Src/main.c **** 
 255:Core/Src/main.c **** /**
 256:Core/Src/main.c ****   * @brief TIM3 Initialization Function
 257:Core/Src/main.c ****   * @param None
 258:Core/Src/main.c ****   * @retval None
 259:Core/Src/main.c ****   */
ARM GAS  /tmp/cctkHiNQ.s 			page 6


 260:Core/Src/main.c **** static void MX_TIM3_Init(void)
 261:Core/Src/main.c **** {
 262:Core/Src/main.c **** 
 263:Core/Src/main.c ****   /* USER CODE BEGIN TIM3_Init 0 */
 264:Core/Src/main.c **** 
 265:Core/Src/main.c ****   /* USER CODE END TIM3_Init 0 */
 266:Core/Src/main.c **** 
 267:Core/Src/main.c ****   TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 268:Core/Src/main.c ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
 269:Core/Src/main.c ****   TIM_OC_InitTypeDef sConfigOC = {0};
 270:Core/Src/main.c **** 
 271:Core/Src/main.c ****   /* USER CODE BEGIN TIM3_Init 1 */
 272:Core/Src/main.c **** 
 273:Core/Src/main.c ****   /* USER CODE END TIM3_Init 1 */
 274:Core/Src/main.c ****   htim3.Instance = TIM3;
 275:Core/Src/main.c ****   htim3.Init.Prescaler = 25-1;
 276:Core/Src/main.c ****   htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 277:Core/Src/main.c ****   htim3.Init.Period = 999;
 278:Core/Src/main.c ****   htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 279:Core/Src/main.c ****   htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 280:Core/Src/main.c ****   if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 281:Core/Src/main.c ****   {
 282:Core/Src/main.c ****     Error_Handler();
 283:Core/Src/main.c ****   }
 284:Core/Src/main.c ****   sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 285:Core/Src/main.c ****   if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 286:Core/Src/main.c ****   {
 287:Core/Src/main.c ****     Error_Handler();
 288:Core/Src/main.c ****   }
 289:Core/Src/main.c ****   if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 290:Core/Src/main.c ****   {
 291:Core/Src/main.c ****     Error_Handler();
 292:Core/Src/main.c ****   }
 293:Core/Src/main.c ****   sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 294:Core/Src/main.c ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 295:Core/Src/main.c ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 296:Core/Src/main.c ****   {
 297:Core/Src/main.c ****     Error_Handler();
 298:Core/Src/main.c ****   }
 299:Core/Src/main.c ****   sConfigOC.OCMode = TIM_OCMODE_PWM1;
 300:Core/Src/main.c ****   sConfigOC.Pulse = 999;
 301:Core/Src/main.c ****   sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 302:Core/Src/main.c ****   sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 303:Core/Src/main.c ****   if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 304:Core/Src/main.c ****   {
 305:Core/Src/main.c ****     Error_Handler();
 306:Core/Src/main.c ****   }
 307:Core/Src/main.c ****   if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 308:Core/Src/main.c ****   {
 309:Core/Src/main.c ****     Error_Handler();
 310:Core/Src/main.c ****   }
 311:Core/Src/main.c ****   if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 312:Core/Src/main.c ****   {
 313:Core/Src/main.c ****     Error_Handler();
 314:Core/Src/main.c ****   }
 315:Core/Src/main.c ****   if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 316:Core/Src/main.c ****   {
ARM GAS  /tmp/cctkHiNQ.s 			page 7


 317:Core/Src/main.c ****     Error_Handler();
 318:Core/Src/main.c ****   }
 319:Core/Src/main.c ****   /* USER CODE BEGIN TIM3_Init 2 */
 320:Core/Src/main.c **** 
 321:Core/Src/main.c ****   /* USER CODE END TIM3_Init 2 */
 322:Core/Src/main.c ****   HAL_TIM_MspPostInit(&htim3);
 323:Core/Src/main.c **** 
 324:Core/Src/main.c **** }
 325:Core/Src/main.c **** 
 326:Core/Src/main.c **** /**
 327:Core/Src/main.c ****   * @brief USART1 Initialization Function
 328:Core/Src/main.c ****   * @param None
 329:Core/Src/main.c ****   * @retval None
 330:Core/Src/main.c ****   */
 331:Core/Src/main.c **** static void MX_USART1_UART_Init(void)
 332:Core/Src/main.c **** {
 333:Core/Src/main.c **** 
 334:Core/Src/main.c ****   /* USER CODE BEGIN USART1_Init 0 */
 335:Core/Src/main.c **** 
 336:Core/Src/main.c ****   /* USER CODE END USART1_Init 0 */
 337:Core/Src/main.c **** 
 338:Core/Src/main.c ****   /* USER CODE BEGIN USART1_Init 1 */
 339:Core/Src/main.c **** 
 340:Core/Src/main.c ****   /* USER CODE END USART1_Init 1 */
 341:Core/Src/main.c ****   huart1.Instance = USART1;
 342:Core/Src/main.c ****   huart1.Init.BaudRate = 115200;
 343:Core/Src/main.c ****   huart1.Init.WordLength = UART_WORDLENGTH_8B;
 344:Core/Src/main.c ****   huart1.Init.StopBits = UART_STOPBITS_1;
 345:Core/Src/main.c ****   huart1.Init.Parity = UART_PARITY_NONE;
 346:Core/Src/main.c ****   huart1.Init.Mode = UART_MODE_TX_RX;
 347:Core/Src/main.c ****   huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 348:Core/Src/main.c ****   huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 349:Core/Src/main.c ****   if (HAL_UART_Init(&huart1) != HAL_OK)
 350:Core/Src/main.c ****   {
 351:Core/Src/main.c ****     Error_Handler();
 352:Core/Src/main.c ****   }
 353:Core/Src/main.c ****   /* USER CODE BEGIN USART1_Init 2 */
 354:Core/Src/main.c **** 
 355:Core/Src/main.c ****   /* USER CODE END USART1_Init 2 */
 356:Core/Src/main.c **** 
 357:Core/Src/main.c **** }
 358:Core/Src/main.c **** 
 359:Core/Src/main.c **** /**
 360:Core/Src/main.c ****   * Enable DMA controller clock
 361:Core/Src/main.c ****   */
 362:Core/Src/main.c **** static void MX_DMA_Init(void)
 363:Core/Src/main.c **** {
 364:Core/Src/main.c **** 
 365:Core/Src/main.c ****   /* DMA controller clock enable */
 366:Core/Src/main.c ****   __HAL_RCC_DMA2_CLK_ENABLE();
 367:Core/Src/main.c **** 
 368:Core/Src/main.c ****   /* DMA interrupt init */
 369:Core/Src/main.c ****   /* DMA2_Stream2_IRQn interrupt configuration */
 370:Core/Src/main.c ****   HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 371:Core/Src/main.c ****   HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 372:Core/Src/main.c ****   /* DMA2_Stream7_IRQn interrupt configuration */
 373:Core/Src/main.c ****   HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 0, 0);
ARM GAS  /tmp/cctkHiNQ.s 			page 8


 374:Core/Src/main.c ****   HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 375:Core/Src/main.c **** 
 376:Core/Src/main.c **** }
 377:Core/Src/main.c **** 
 378:Core/Src/main.c **** /**
 379:Core/Src/main.c ****   * @brief GPIO Initialization Function
 380:Core/Src/main.c ****   * @param None
 381:Core/Src/main.c ****   * @retval None
 382:Core/Src/main.c ****   */
 383:Core/Src/main.c **** static void MX_GPIO_Init(void)
 384:Core/Src/main.c **** {
  28              		.loc 1 384 1 view -0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 40
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32 0000 F0B5     		push	{r4, r5, r6, r7, lr}
  33              	.LCFI0:
  34              		.cfi_def_cfa_offset 20
  35              		.cfi_offset 4, -20
  36              		.cfi_offset 5, -16
  37              		.cfi_offset 6, -12
  38              		.cfi_offset 7, -8
  39              		.cfi_offset 14, -4
  40 0002 8BB0     		sub	sp, sp, #44
  41              	.LCFI1:
  42              		.cfi_def_cfa_offset 64
 385:Core/Src/main.c ****   GPIO_InitTypeDef GPIO_InitStruct = {0};
  43              		.loc 1 385 3 view .LVU1
  44              		.loc 1 385 20 is_stmt 0 view .LVU2
  45 0004 0024     		movs	r4, #0
  46 0006 0594     		str	r4, [sp, #20]
  47 0008 0694     		str	r4, [sp, #24]
  48 000a 0794     		str	r4, [sp, #28]
  49 000c 0894     		str	r4, [sp, #32]
  50 000e 0994     		str	r4, [sp, #36]
 386:Core/Src/main.c **** /* USER CODE BEGIN MX_GPIO_Init_1 */
 387:Core/Src/main.c **** /* USER CODE END MX_GPIO_Init_1 */
 388:Core/Src/main.c **** 
 389:Core/Src/main.c ****   /* GPIO Ports Clock Enable */
 390:Core/Src/main.c ****   __HAL_RCC_GPIOC_CLK_ENABLE();
  51              		.loc 1 390 3 is_stmt 1 view .LVU3
  52              	.LBB4:
  53              		.loc 1 390 3 view .LVU4
  54 0010 0194     		str	r4, [sp, #4]
  55              		.loc 1 390 3 view .LVU5
  56 0012 2A4B     		ldr	r3, .L3
  57 0014 1A6B     		ldr	r2, [r3, #48]
  58 0016 42F00402 		orr	r2, r2, #4
  59 001a 1A63     		str	r2, [r3, #48]
  60              		.loc 1 390 3 view .LVU6
  61 001c 1A6B     		ldr	r2, [r3, #48]
  62 001e 02F00402 		and	r2, r2, #4
  63 0022 0192     		str	r2, [sp, #4]
  64              		.loc 1 390 3 view .LVU7
  65 0024 019A     		ldr	r2, [sp, #4]
  66              	.LBE4:
 391:Core/Src/main.c ****   __HAL_RCC_GPIOH_CLK_ENABLE();
ARM GAS  /tmp/cctkHiNQ.s 			page 9


  67              		.loc 1 391 3 view .LVU8
  68              	.LBB5:
  69              		.loc 1 391 3 view .LVU9
  70 0026 0294     		str	r4, [sp, #8]
  71              		.loc 1 391 3 view .LVU10
  72 0028 1A6B     		ldr	r2, [r3, #48]
  73 002a 42F08002 		orr	r2, r2, #128
  74 002e 1A63     		str	r2, [r3, #48]
  75              		.loc 1 391 3 view .LVU11
  76 0030 1A6B     		ldr	r2, [r3, #48]
  77 0032 02F08002 		and	r2, r2, #128
  78 0036 0292     		str	r2, [sp, #8]
  79              		.loc 1 391 3 view .LVU12
  80 0038 029A     		ldr	r2, [sp, #8]
  81              	.LBE5:
 392:Core/Src/main.c ****   __HAL_RCC_GPIOA_CLK_ENABLE();
  82              		.loc 1 392 3 view .LVU13
  83              	.LBB6:
  84              		.loc 1 392 3 view .LVU14
  85 003a 0394     		str	r4, [sp, #12]
  86              		.loc 1 392 3 view .LVU15
  87 003c 1A6B     		ldr	r2, [r3, #48]
  88 003e 42F00102 		orr	r2, r2, #1
  89 0042 1A63     		str	r2, [r3, #48]
  90              		.loc 1 392 3 view .LVU16
  91 0044 1A6B     		ldr	r2, [r3, #48]
  92 0046 02F00102 		and	r2, r2, #1
  93 004a 0392     		str	r2, [sp, #12]
  94              		.loc 1 392 3 view .LVU17
  95 004c 039A     		ldr	r2, [sp, #12]
  96              	.LBE6:
 393:Core/Src/main.c ****   __HAL_RCC_GPIOB_CLK_ENABLE();
  97              		.loc 1 393 3 view .LVU18
  98              	.LBB7:
  99              		.loc 1 393 3 view .LVU19
 100 004e 0494     		str	r4, [sp, #16]
 101              		.loc 1 393 3 view .LVU20
 102 0050 1A6B     		ldr	r2, [r3, #48]
 103 0052 42F00202 		orr	r2, r2, #2
 104 0056 1A63     		str	r2, [r3, #48]
 105              		.loc 1 393 3 view .LVU21
 106 0058 1B6B     		ldr	r3, [r3, #48]
 107 005a 03F00203 		and	r3, r3, #2
 108 005e 0493     		str	r3, [sp, #16]
 109              		.loc 1 393 3 view .LVU22
 110 0060 049B     		ldr	r3, [sp, #16]
 111              	.LBE7:
 394:Core/Src/main.c **** 
 395:Core/Src/main.c ****   /*Configure GPIO pin Output Level */
 396:Core/Src/main.c ****   HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 112              		.loc 1 396 3 view .LVU23
 113 0062 174F     		ldr	r7, .L3+4
 114 0064 2246     		mov	r2, r4
 115 0066 4FF40051 		mov	r1, #8192
 116 006a 3846     		mov	r0, r7
 117 006c FFF7FEFF 		bl	HAL_GPIO_WritePin
 118              	.LVL0:
ARM GAS  /tmp/cctkHiNQ.s 			page 10


 397:Core/Src/main.c **** 
 398:Core/Src/main.c ****   /*Configure GPIO pin Output Level */
 399:Core/Src/main.c ****   HAL_GPIO_WritePin(GPIOB, GPIO_FL_Pin|GPIO_FR_Pin|GPIO_BL_Pin|GPIO_BR_Pin, GPIO_PIN_RESET);
 119              		.loc 1 399 3 view .LVU24
 120 0070 144E     		ldr	r6, .L3+8
 121 0072 2246     		mov	r2, r4
 122 0074 4FF47071 		mov	r1, #960
 123 0078 3046     		mov	r0, r6
 124 007a FFF7FEFF 		bl	HAL_GPIO_WritePin
 125              	.LVL1:
 400:Core/Src/main.c **** 
 401:Core/Src/main.c ****   /*Configure GPIO pin : PC13 */
 402:Core/Src/main.c ****   GPIO_InitStruct.Pin = GPIO_PIN_13;
 126              		.loc 1 402 3 view .LVU25
 127              		.loc 1 402 23 is_stmt 0 view .LVU26
 128 007e 4FF40053 		mov	r3, #8192
 129 0082 0593     		str	r3, [sp, #20]
 403:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 130              		.loc 1 403 3 is_stmt 1 view .LVU27
 131              		.loc 1 403 24 is_stmt 0 view .LVU28
 132 0084 0125     		movs	r5, #1
 133 0086 0695     		str	r5, [sp, #24]
 404:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 134              		.loc 1 404 3 is_stmt 1 view .LVU29
 135              		.loc 1 404 24 is_stmt 0 view .LVU30
 136 0088 0794     		str	r4, [sp, #28]
 405:Core/Src/main.c ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 137              		.loc 1 405 3 is_stmt 1 view .LVU31
 138              		.loc 1 405 25 is_stmt 0 view .LVU32
 139 008a 0894     		str	r4, [sp, #32]
 406:Core/Src/main.c ****   HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 140              		.loc 1 406 3 is_stmt 1 view .LVU33
 141 008c 05A9     		add	r1, sp, #20
 142 008e 3846     		mov	r0, r7
 143 0090 FFF7FEFF 		bl	HAL_GPIO_Init
 144              	.LVL2:
 407:Core/Src/main.c **** 
 408:Core/Src/main.c ****   /*Configure GPIO pin : PA0 */
 409:Core/Src/main.c ****   GPIO_InitStruct.Pin = GPIO_PIN_0;
 145              		.loc 1 409 3 view .LVU34
 146              		.loc 1 409 23 is_stmt 0 view .LVU35
 147 0094 0595     		str	r5, [sp, #20]
 410:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 148              		.loc 1 410 3 is_stmt 1 view .LVU36
 149              		.loc 1 410 24 is_stmt 0 view .LVU37
 150 0096 0694     		str	r4, [sp, #24]
 411:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 151              		.loc 1 411 3 is_stmt 1 view .LVU38
 152              		.loc 1 411 24 is_stmt 0 view .LVU39
 153 0098 0794     		str	r4, [sp, #28]
 412:Core/Src/main.c ****   HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 154              		.loc 1 412 3 is_stmt 1 view .LVU40
 155 009a 05A9     		add	r1, sp, #20
 156 009c 0A48     		ldr	r0, .L3+12
 157 009e FFF7FEFF 		bl	HAL_GPIO_Init
 158              	.LVL3:
 413:Core/Src/main.c **** 
ARM GAS  /tmp/cctkHiNQ.s 			page 11


 414:Core/Src/main.c ****   /*Configure GPIO pins : GPIO_FL_Pin GPIO_FR_Pin GPIO_BL_Pin GPIO_BR_Pin */
 415:Core/Src/main.c ****   GPIO_InitStruct.Pin = GPIO_FL_Pin|GPIO_FR_Pin|GPIO_BL_Pin|GPIO_BR_Pin;
 159              		.loc 1 415 3 view .LVU41
 160              		.loc 1 415 23 is_stmt 0 view .LVU42
 161 00a2 4FF47073 		mov	r3, #960
 162 00a6 0593     		str	r3, [sp, #20]
 416:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 163              		.loc 1 416 3 is_stmt 1 view .LVU43
 164              		.loc 1 416 24 is_stmt 0 view .LVU44
 165 00a8 0695     		str	r5, [sp, #24]
 417:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 166              		.loc 1 417 3 is_stmt 1 view .LVU45
 167              		.loc 1 417 24 is_stmt 0 view .LVU46
 168 00aa 0794     		str	r4, [sp, #28]
 418:Core/Src/main.c ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 169              		.loc 1 418 3 is_stmt 1 view .LVU47
 170              		.loc 1 418 25 is_stmt 0 view .LVU48
 171 00ac 0323     		movs	r3, #3
 172 00ae 0893     		str	r3, [sp, #32]
 419:Core/Src/main.c ****   HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 173              		.loc 1 419 3 is_stmt 1 view .LVU49
 174 00b0 05A9     		add	r1, sp, #20
 175 00b2 3046     		mov	r0, r6
 176 00b4 FFF7FEFF 		bl	HAL_GPIO_Init
 177              	.LVL4:
 420:Core/Src/main.c **** 
 421:Core/Src/main.c **** /* USER CODE BEGIN MX_GPIO_Init_2 */
 422:Core/Src/main.c **** /* USER CODE END MX_GPIO_Init_2 */
 423:Core/Src/main.c **** }
 178              		.loc 1 423 1 is_stmt 0 view .LVU50
 179 00b8 0BB0     		add	sp, sp, #44
 180              	.LCFI2:
 181              		.cfi_def_cfa_offset 20
 182              		@ sp needed
 183 00ba F0BD     		pop	{r4, r5, r6, r7, pc}
 184              	.L4:
 185              		.align	2
 186              	.L3:
 187 00bc 00380240 		.word	1073887232
 188 00c0 00080240 		.word	1073874944
 189 00c4 00040240 		.word	1073873920
 190 00c8 00000240 		.word	1073872896
 191              		.cfi_endproc
 192              	.LFE139:
 194              		.section	.text.MX_DMA_Init,"ax",%progbits
 195              		.align	1
 196              		.syntax unified
 197              		.thumb
 198              		.thumb_func
 199              		.fpu fpv4-sp-d16
 201              	MX_DMA_Init:
 202              	.LFB138:
 363:Core/Src/main.c **** 
 203              		.loc 1 363 1 is_stmt 1 view -0
 204              		.cfi_startproc
 205              		@ args = 0, pretend = 0, frame = 8
 206              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  /tmp/cctkHiNQ.s 			page 12


 207 0000 10B5     		push	{r4, lr}
 208              	.LCFI3:
 209              		.cfi_def_cfa_offset 8
 210              		.cfi_offset 4, -8
 211              		.cfi_offset 14, -4
 212 0002 82B0     		sub	sp, sp, #8
 213              	.LCFI4:
 214              		.cfi_def_cfa_offset 16
 366:Core/Src/main.c **** 
 215              		.loc 1 366 3 view .LVU52
 216              	.LBB8:
 366:Core/Src/main.c **** 
 217              		.loc 1 366 3 view .LVU53
 218 0004 0024     		movs	r4, #0
 219 0006 0194     		str	r4, [sp, #4]
 366:Core/Src/main.c **** 
 220              		.loc 1 366 3 view .LVU54
 221 0008 0D4B     		ldr	r3, .L7
 222 000a 1A6B     		ldr	r2, [r3, #48]
 223 000c 42F48002 		orr	r2, r2, #4194304
 224 0010 1A63     		str	r2, [r3, #48]
 366:Core/Src/main.c **** 
 225              		.loc 1 366 3 view .LVU55
 226 0012 1B6B     		ldr	r3, [r3, #48]
 227 0014 03F48003 		and	r3, r3, #4194304
 228 0018 0193     		str	r3, [sp, #4]
 366:Core/Src/main.c **** 
 229              		.loc 1 366 3 view .LVU56
 230 001a 019B     		ldr	r3, [sp, #4]
 231              	.LBE8:
 370:Core/Src/main.c ****   HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 232              		.loc 1 370 3 view .LVU57
 233 001c 2246     		mov	r2, r4
 234 001e 2146     		mov	r1, r4
 235 0020 3A20     		movs	r0, #58
 236 0022 FFF7FEFF 		bl	HAL_NVIC_SetPriority
 237              	.LVL5:
 371:Core/Src/main.c ****   /* DMA2_Stream7_IRQn interrupt configuration */
 238              		.loc 1 371 3 view .LVU58
 239 0026 3A20     		movs	r0, #58
 240 0028 FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 241              	.LVL6:
 373:Core/Src/main.c ****   HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 242              		.loc 1 373 3 view .LVU59
 243 002c 2246     		mov	r2, r4
 244 002e 2146     		mov	r1, r4
 245 0030 4620     		movs	r0, #70
 246 0032 FFF7FEFF 		bl	HAL_NVIC_SetPriority
 247              	.LVL7:
 374:Core/Src/main.c **** 
 248              		.loc 1 374 3 view .LVU60
 249 0036 4620     		movs	r0, #70
 250 0038 FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 251              	.LVL8:
 376:Core/Src/main.c **** 
 252              		.loc 1 376 1 is_stmt 0 view .LVU61
 253 003c 02B0     		add	sp, sp, #8
ARM GAS  /tmp/cctkHiNQ.s 			page 13


 254              	.LCFI5:
 255              		.cfi_def_cfa_offset 8
 256              		@ sp needed
 257 003e 10BD     		pop	{r4, pc}
 258              	.L8:
 259              		.align	2
 260              	.L7:
 261 0040 00380240 		.word	1073887232
 262              		.cfi_endproc
 263              	.LFE138:
 265              		.section	.text.HAL_UART_TxCpltCallback,"ax",%progbits
 266              		.align	1
 267              		.global	HAL_UART_TxCpltCallback
 268              		.syntax unified
 269              		.thumb
 270              		.thumb_func
 271              		.fpu fpv4-sp-d16
 273              	HAL_UART_TxCpltCallback:
 274              	.LVL9:
 275              	.LFB140:
 424:Core/Src/main.c **** 
 425:Core/Src/main.c **** /* USER CODE BEGIN 4 */
 426:Core/Src/main.c **** 
 427:Core/Src/main.c **** //UART 2 transmission complete callback
 428:Core/Src/main.c **** void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
 429:Core/Src/main.c **** {
 276              		.loc 1 429 1 is_stmt 1 view -0
 277              		.cfi_startproc
 278              		@ args = 0, pretend = 0, frame = 0
 279              		@ frame_needed = 0, uses_anonymous_args = 0
 280              		.loc 1 429 1 is_stmt 0 view .LVU63
 281 0000 10B5     		push	{r4, lr}
 282              	.LCFI6:
 283              		.cfi_def_cfa_offset 8
 284              		.cfi_offset 4, -8
 285              		.cfi_offset 14, -4
 430:Core/Src/main.c **** 	memset(user_data, 0, strlen(user_data)); //empty the transmission data buffer
 286              		.loc 1 430 2 is_stmt 1 view .LVU64
 287 0002 054B     		ldr	r3, .L11
 288 0004 1C68     		ldr	r4, [r3]
 289 0006 2046     		mov	r0, r4
 290              	.LVL10:
 291              		.loc 1 430 2 is_stmt 0 view .LVU65
 292 0008 FFF7FEFF 		bl	strlen
 293              	.LVL11:
 294 000c 0246     		mov	r2, r0
 295 000e 0021     		movs	r1, #0
 296 0010 2046     		mov	r0, r4
 297 0012 FFF7FEFF 		bl	memset
 298              	.LVL12:
 431:Core/Src/main.c ****   
 432:Core/Src/main.c **** }
 299              		.loc 1 432 1 view .LVU66
 300 0016 10BD     		pop	{r4, pc}
 301              	.L12:
 302              		.align	2
 303              	.L11:
ARM GAS  /tmp/cctkHiNQ.s 			page 14


 304 0018 00000000 		.word	.LANCHOR0
 305              		.cfi_endproc
 306              	.LFE140:
 308              		.section	.text.HAL_UART_RxCpltCallback,"ax",%progbits
 309              		.align	1
 310              		.global	HAL_UART_RxCpltCallback
 311              		.syntax unified
 312              		.thumb
 313              		.thumb_func
 314              		.fpu fpv4-sp-d16
 316              	HAL_UART_RxCpltCallback:
 317              	.LVL13:
 318              	.LFB141:
 433:Core/Src/main.c **** 
 434:Core/Src/main.c **** //UART 2 receive complete callback
 435:Core/Src/main.c **** void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
 436:Core/Src/main.c **** {
 319              		.loc 1 436 1 is_stmt 1 view -0
 320              		.cfi_startproc
 321              		@ args = 0, pretend = 0, frame = 0
 322              		@ frame_needed = 0, uses_anonymous_args = 0
 323              		.loc 1 436 1 is_stmt 0 view .LVU68
 324 0000 10B5     		push	{r4, lr}
 325              	.LCFI7:
 326              		.cfi_def_cfa_offset 8
 327              		.cfi_offset 4, -8
 328              		.cfi_offset 14, -4
 437:Core/Src/main.c **** 	 char *mv_to_next_line = "\r\n";  
 329              		.loc 1 437 3 is_stmt 1 view .LVU69
 330              	.LVL14:
 438:Core/Src/main.c **** 
 439:Core/Src/main.c **** 	 if(recvd_data == '\r') //when enter is pressed go to this condition
 331              		.loc 1 439 3 view .LVU70
 332              		.loc 1 439 17 is_stmt 0 view .LVU71
 333 0002 114B     		ldr	r3, .L18
 334 0004 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 335              		.loc 1 439 5 view .LVU72
 336 0006 0D2B     		cmp	r3, #13
 337 0008 11D0     		beq	.L17
 440:Core/Src/main.c **** 	 { 
 441:Core/Src/main.c **** 
 442:Core/Src/main.c ****      command_flag = 1;
 443:Core/Src/main.c ****      
 444:Core/Src/main.c ****      HAL_UART_Transmit(&huart1,(uint8_t*)mv_to_next_line,strlen(mv_to_next_line),100);
 445:Core/Src/main.c ****      memset(mv_to_next_line, 0, strlen(mv_to_next_line));
 446:Core/Src/main.c ****      
 447:Core/Src/main.c **** 	 }
 448:Core/Src/main.c **** 	 else 
 449:Core/Src/main.c **** 	 {
 450:Core/Src/main.c **** 		 data_buffer[count++] = recvd_data; // every time when interrput is happen, received 1 byte of da
 338              		.loc 1 450 4 is_stmt 1 view .LVU73
 339              		.loc 1 450 21 is_stmt 0 view .LVU74
 340 000a 1049     		ldr	r1, .L18+4
 341 000c 0A68     		ldr	r2, [r1]
 342 000e 501C     		adds	r0, r2, #1
 343              	.LVL15:
 344              		.loc 1 450 21 view .LVU75
ARM GAS  /tmp/cctkHiNQ.s 			page 15


 345 0010 0860     		str	r0, [r1]
 346              		.loc 1 450 25 view .LVU76
 347 0012 0F49     		ldr	r1, .L18+8
 348 0014 8B54     		strb	r3, [r1, r2]
 451:Core/Src/main.c ****      HAL_UART_Transmit(&huart1,&recvd_data,1,100);
 349              		.loc 1 451 6 is_stmt 1 view .LVU77
 350 0016 6423     		movs	r3, #100
 351 0018 0122     		movs	r2, #1
 352 001a 0B49     		ldr	r1, .L18
 353 001c 0D48     		ldr	r0, .L18+12
 354 001e FFF7FEFF 		bl	HAL_UART_Transmit
 355              	.LVL16:
 356              	.L15:
 452:Core/Src/main.c **** 	 }
 453:Core/Src/main.c **** 	 HAL_UART_Receive_IT(&huart1,&recvd_data,1); //start next data receive interrupt
 357              		.loc 1 453 3 view .LVU78
 358 0022 0122     		movs	r2, #1
 359 0024 0849     		ldr	r1, .L18
 360 0026 0B48     		ldr	r0, .L18+12
 361 0028 FFF7FEFF 		bl	HAL_UART_Receive_IT
 362              	.LVL17:
 454:Core/Src/main.c **** }
 363              		.loc 1 454 1 is_stmt 0 view .LVU79
 364 002c 10BD     		pop	{r4, pc}
 365              	.LVL18:
 366              	.L17:
 442:Core/Src/main.c ****      
 367              		.loc 1 442 6 is_stmt 1 view .LVU80
 442:Core/Src/main.c ****      
 368              		.loc 1 442 19 is_stmt 0 view .LVU81
 369 002e 0A4B     		ldr	r3, .L18+16
 370 0030 0122     		movs	r2, #1
 371 0032 1A70     		strb	r2, [r3]
 444:Core/Src/main.c ****      memset(mv_to_next_line, 0, strlen(mv_to_next_line));
 372              		.loc 1 444 6 is_stmt 1 view .LVU82
 373 0034 094C     		ldr	r4, .L18+20
 374 0036 6423     		movs	r3, #100
 375 0038 0222     		movs	r2, #2
 376 003a 2146     		mov	r1, r4
 377 003c 0548     		ldr	r0, .L18+12
 378              	.LVL19:
 444:Core/Src/main.c ****      memset(mv_to_next_line, 0, strlen(mv_to_next_line));
 379              		.loc 1 444 6 is_stmt 0 view .LVU83
 380 003e FFF7FEFF 		bl	HAL_UART_Transmit
 381              	.LVL20:
 445:Core/Src/main.c ****      
 382              		.loc 1 445 6 is_stmt 1 view .LVU84
 383 0042 0023     		movs	r3, #0
 384 0044 2380     		strh	r3, [r4]	@ movhi
 385 0046 ECE7     		b	.L15
 386              	.L19:
 387              		.align	2
 388              	.L18:
 389 0048 00000000 		.word	recvd_data
 390 004c 00000000 		.word	.LANCHOR2
 391 0050 00000000 		.word	data_buffer
 392 0054 00000000 		.word	huart1
ARM GAS  /tmp/cctkHiNQ.s 			page 16


 393 0058 00000000 		.word	.LANCHOR1
 394 005c 00000000 		.word	.LC0
 395              		.cfi_endproc
 396              	.LFE141:
 398              		.section	.text.Error_Handler,"ax",%progbits
 399              		.align	1
 400              		.global	Error_Handler
 401              		.syntax unified
 402              		.thumb
 403              		.thumb_func
 404              		.fpu fpv4-sp-d16
 406              	Error_Handler:
 407              	.LFB142:
 455:Core/Src/main.c **** 
 456:Core/Src/main.c **** /* USER CODE END 4 */
 457:Core/Src/main.c **** 
 458:Core/Src/main.c **** /**
 459:Core/Src/main.c ****   * @brief  This function is executed in case of error occurrence.
 460:Core/Src/main.c ****   * @retval None
 461:Core/Src/main.c ****   */
 462:Core/Src/main.c **** void Error_Handler(void)
 463:Core/Src/main.c **** {
 408              		.loc 1 463 1 view -0
 409              		.cfi_startproc
 410              		@ Volatile: function does not return.
 411              		@ args = 0, pretend = 0, frame = 0
 412              		@ frame_needed = 0, uses_anonymous_args = 0
 413              		@ link register save eliminated.
 464:Core/Src/main.c ****   /* USER CODE BEGIN Error_Handler_Debug */
 465:Core/Src/main.c ****   /* User can add his own implementation to report the HAL error return state */
 466:Core/Src/main.c ****   __disable_irq();
 414              		.loc 1 466 3 view .LVU86
 415              	.LBB9:
 416              	.LBI9:
 417              		.file 2 "Drivers/CMSIS/Include/cmsis_gcc.h"
   1:Drivers/CMSIS/Include/cmsis_gcc.h **** /**************************************************************************//**
   2:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @brief    CMSIS compiler GCC header file
   4:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @version  V5.4.1
   5:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @date     27. May 2021
   6:Drivers/CMSIS/Include/cmsis_gcc.h ****  ******************************************************************************/
   7:Drivers/CMSIS/Include/cmsis_gcc.h **** /*
   8:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Copyright (c) 2009-2021 Arm Limited. All rights reserved.
   9:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  10:Drivers/CMSIS/Include/cmsis_gcc.h ****  * SPDX-License-Identifier: Apache-2.0
  11:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  12:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  13:Drivers/CMSIS/Include/cmsis_gcc.h ****  * not use this file except in compliance with the License.
  14:Drivers/CMSIS/Include/cmsis_gcc.h ****  * You may obtain a copy of the License at
  15:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  16:Drivers/CMSIS/Include/cmsis_gcc.h ****  * www.apache.org/licenses/LICENSE-2.0
  17:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  18:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Unless required by applicable law or agreed to in writing, software
  19:Drivers/CMSIS/Include/cmsis_gcc.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  20:Drivers/CMSIS/Include/cmsis_gcc.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  21:Drivers/CMSIS/Include/cmsis_gcc.h ****  * See the License for the specific language governing permissions and
  22:Drivers/CMSIS/Include/cmsis_gcc.h ****  * limitations under the License.
ARM GAS  /tmp/cctkHiNQ.s 			page 17


  23:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  24:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  25:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  26:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_H
  27:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  28:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ignore some GCC warnings */
  29:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic push
  30:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  31:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  32:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  33:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  34:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Fallback for __has_builtin */
  35:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __has_builtin
  36:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __has_builtin(x) (0)
  37:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  38:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  39:Drivers/CMSIS/Include/cmsis_gcc.h **** /* CMSIS compiler specific defines */
  40:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ASM
  41:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ASM                                  __asm
  42:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  43:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __INLINE
  44:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __INLINE                               inline
  45:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  46:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_INLINE
  47:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_INLINE                        static inline
  48:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  49:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_FORCEINLINE
  50:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_FORCEINLINE                   __attribute__((always_inline)) static inline
  51:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  52:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __NO_RETURN
  53:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __NO_RETURN                            __attribute__((__noreturn__))
  54:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  55:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __USED
  56:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __USED                                 __attribute__((used))
  57:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  58:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __WEAK
  59:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __WEAK                                 __attribute__((weak))
  60:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  61:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED
  62:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED                               __attribute__((packed, aligned(1)))
  63:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  64:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_STRUCT
  65:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_STRUCT                        struct __attribute__((packed, aligned(1)))
  66:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  67:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_UNION
  68:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_UNION                         union __attribute__((packed, aligned(1)))
  69:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  70:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32        /* deprecated */
  71:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  72:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  73:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  74:Drivers/CMSIS/Include/cmsis_gcc.h ****   struct __attribute__((packed)) T_UINT32 { uint32_t v; };
  75:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  76:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32(x)                  (((struct T_UINT32 *)(x))->v)
  77:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  78:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_WRITE
  79:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
ARM GAS  /tmp/cctkHiNQ.s 			page 18


  80:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  81:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  82:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_WRITE { uint16_t v; };
  83:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  84:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_WRITE(addr, val)    (void)((((struct T_UINT16_WRITE *)(void *)(addr))-
  85:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  86:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_READ
  87:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  88:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  89:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  90:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_READ { uint16_t v; };
  91:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  92:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_READ(addr)          (((const struct T_UINT16_READ *)(const void *)(add
  93:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  94:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_WRITE
  95:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  96:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  97:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  98:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_WRITE { uint32_t v; };
  99:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 100:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_WRITE(addr, val)    (void)((((struct T_UINT32_WRITE *)(void *)(addr))-
 101:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 102:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_READ
 103:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
 104:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
 105:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
 106:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_READ { uint32_t v; };
 107:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 108:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_READ(addr)          (((const struct T_UINT32_READ *)(const void *)(add
 109:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 110:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ALIGNED
 111:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ALIGNED(x)                           __attribute__((aligned(x)))
 112:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 113:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __RESTRICT
 114:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __RESTRICT                             __restrict
 115:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 116:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __COMPILER_BARRIER
 117:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __COMPILER_BARRIER()                   __ASM volatile("":::"memory")
 118:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 119:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 120:Drivers/CMSIS/Include/cmsis_gcc.h **** /* #########################  Startup and Lowlevel Init  ######################## */
 121:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 122:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __PROGRAM_START
 123:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 124:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 125:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Initializes data and bss sections
 126:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details This default implementations initialized all data and additional bss
 127:Drivers/CMSIS/Include/cmsis_gcc.h ****            sections relying on .copy.table and .zero.table specified properly
 128:Drivers/CMSIS/Include/cmsis_gcc.h ****            in the used linker script.
 129:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 130:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 131:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE __NO_RETURN void __cmsis_start(void)
 132:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 133:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern void _start(void) __NO_RETURN;
 134:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 135:Drivers/CMSIS/Include/cmsis_gcc.h ****   typedef struct {
 136:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t const* src;
ARM GAS  /tmp/cctkHiNQ.s 			page 19


 137:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t* dest;
 138:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t  wlen;
 139:Drivers/CMSIS/Include/cmsis_gcc.h ****   } __copy_table_t;
 140:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 141:Drivers/CMSIS/Include/cmsis_gcc.h ****   typedef struct {
 142:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t* dest;
 143:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t  wlen;
 144:Drivers/CMSIS/Include/cmsis_gcc.h ****   } __zero_table_t;
 145:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 146:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __copy_table_t __copy_table_start__;
 147:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __copy_table_t __copy_table_end__;
 148:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __zero_table_t __zero_table_start__;
 149:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __zero_table_t __zero_table_end__;
 150:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 151:Drivers/CMSIS/Include/cmsis_gcc.h ****   for (__copy_table_t const* pTable = &__copy_table_start__; pTable < &__copy_table_end__; ++pTable
 152:Drivers/CMSIS/Include/cmsis_gcc.h ****     for(uint32_t i=0u; i<pTable->wlen; ++i) {
 153:Drivers/CMSIS/Include/cmsis_gcc.h ****       pTable->dest[i] = pTable->src[i];
 154:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 155:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 156:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 157:Drivers/CMSIS/Include/cmsis_gcc.h ****   for (__zero_table_t const* pTable = &__zero_table_start__; pTable < &__zero_table_end__; ++pTable
 158:Drivers/CMSIS/Include/cmsis_gcc.h ****     for(uint32_t i=0u; i<pTable->wlen; ++i) {
 159:Drivers/CMSIS/Include/cmsis_gcc.h ****       pTable->dest[i] = 0u;
 160:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 161:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 162:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 163:Drivers/CMSIS/Include/cmsis_gcc.h ****   _start();
 164:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 165:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 166:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __PROGRAM_START           __cmsis_start
 167:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 168:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 169:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __INITIAL_SP
 170:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __INITIAL_SP              __StackTop
 171:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 172:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 173:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __STACK_LIMIT
 174:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __STACK_LIMIT             __StackLimit
 175:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 176:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 177:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __VECTOR_TABLE
 178:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __VECTOR_TABLE            __Vectors
 179:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 180:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 181:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __VECTOR_TABLE_ATTRIBUTE
 182:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __VECTOR_TABLE_ATTRIBUTE  __attribute__((used, section(".vectors")))
 183:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 184:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 185:Drivers/CMSIS/Include/cmsis_gcc.h **** #if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
 186:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __STACK_SEAL
 187:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __STACK_SEAL              __StackSeal
 188:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 189:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 190:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __TZ_STACK_SEAL_SIZE
 191:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __TZ_STACK_SEAL_SIZE      8U
 192:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 193:Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  /tmp/cctkHiNQ.s 			page 20


 194:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __TZ_STACK_SEAL_VALUE
 195:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __TZ_STACK_SEAL_VALUE     0xFEF5EDA5FEF5EDA5ULL
 196:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 197:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 198:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 199:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_STACKSEAL_S (uint32_t* stackTop) {
 200:Drivers/CMSIS/Include/cmsis_gcc.h ****   *((uint64_t *)stackTop) = __TZ_STACK_SEAL_VALUE;
 201:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 202:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 203:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 204:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 205:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ##########################  Core Instruction Access  ######################### */
 206:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \defgroup CMSIS_Core_InstructionInterface CMSIS Core Instruction Interface
 207:Drivers/CMSIS/Include/cmsis_gcc.h ****   Access to dedicated instructions
 208:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
 209:Drivers/CMSIS/Include/cmsis_gcc.h **** */
 210:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 211:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Define macros for porting to both thumb1 and thumb2.
 212:Drivers/CMSIS/Include/cmsis_gcc.h ****  * For thumb1, use low register (r0-r7), specified by constraint "l"
 213:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Otherwise, use general registers, specified by constraint "r" */
 214:Drivers/CMSIS/Include/cmsis_gcc.h **** #if defined (__thumb__) && !defined (__thumb2__)
 215:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=l" (r)
 216:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_RW_REG(r) "+l" (r)
 217:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "l" (r)
 218:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 219:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=r" (r)
 220:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_RW_REG(r) "+r" (r)
 221:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "r" (r)
 222:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 223:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 224:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 225:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   No Operation
 226:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details No Operation does nothing. This instruction can be used for code alignment purposes.
 227:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 228:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __NOP()                             __ASM volatile ("nop")
 229:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 230:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 231:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Wait For Interrupt
 232:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Wait For Interrupt is a hint instruction that suspends execution until one of a number o
 233:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 234:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __WFI()                             __ASM volatile ("wfi":::"memory")
 235:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 236:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 237:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 238:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Wait For Event
 239:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Wait For Event is a hint instruction that permits the processor to enter
 240:Drivers/CMSIS/Include/cmsis_gcc.h ****            a low-power state until one of a number of events occurs.
 241:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 242:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __WFE()                             __ASM volatile ("wfe":::"memory")
 243:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 244:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 245:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 246:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Send Event
 247:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Send Event is a hint instruction. It causes an event to be signaled to the CPU.
 248:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 249:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __SEV()                             __ASM volatile ("sev")
 250:Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  /tmp/cctkHiNQ.s 			page 21


 251:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 252:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 253:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Instruction Synchronization Barrier
 254:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Instruction Synchronization Barrier flushes the pipeline in the processor,
 255:Drivers/CMSIS/Include/cmsis_gcc.h ****            so that all instructions following the ISB are fetched from cache or memory,
 256:Drivers/CMSIS/Include/cmsis_gcc.h ****            after the instruction has been completed.
 257:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 258:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __ISB(void)
 259:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 260:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("isb 0xF":::"memory");
 261:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 262:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 263:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 264:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 265:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Data Synchronization Barrier
 266:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Acts as a special kind of Data Memory Barrier.
 267:Drivers/CMSIS/Include/cmsis_gcc.h ****            It completes when all explicit memory accesses before this instruction complete.
 268:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 269:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __DSB(void)
 270:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 271:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("dsb 0xF":::"memory");
 272:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 273:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 274:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 275:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 276:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Data Memory Barrier
 277:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Ensures the apparent order of the explicit memory operations before
 278:Drivers/CMSIS/Include/cmsis_gcc.h ****            and after the instruction, without ensuring their completion.
 279:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 280:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __DMB(void)
 281:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 282:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("dmb 0xF":::"memory");
 283:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 284:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 285:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 286:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 287:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order (32 bit)
 288:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order in unsigned integer value. For example, 0x12345678 becomes 0x785
 289:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 290:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 291:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 292:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __REV(uint32_t value)
 293:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 294:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 5)
 295:Drivers/CMSIS/Include/cmsis_gcc.h ****   return __builtin_bswap32(value);
 296:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 297:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 298:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 299:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM ("rev %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 300:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 301:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 302:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 303:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 304:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 305:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 306:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order (16 bit)
 307:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order within each halfword of a word. For example, 0x12345678 becomes 
ARM GAS  /tmp/cctkHiNQ.s 			page 22


 308:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 309:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 310:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 311:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __REV16(uint32_t value)
 312:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 313:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 314:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 315:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM ("rev16 %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 316:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 317:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 318:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 319:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 320:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 321:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order (16 bit)
 322:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order in a 16-bit value and returns the signed 16-bit result. For exam
 323:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 324:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 325:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 326:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE int16_t __REVSH(int16_t value)
 327:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 328:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 329:Drivers/CMSIS/Include/cmsis_gcc.h ****   return (int16_t)__builtin_bswap16(value);
 330:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 331:Drivers/CMSIS/Include/cmsis_gcc.h ****   int16_t result;
 332:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 333:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM ("revsh %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 334:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 335:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 336:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 337:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 338:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 339:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 340:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Rotate Right in unsigned value (32 bit)
 341:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Rotate Right (immediate) provides the value of the contents of a register rotated by a v
 342:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    op1  Value to rotate
 343:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    op2  Number of Bits to rotate
 344:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Rotated value
 345:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 346:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __ROR(uint32_t op1, uint32_t op2)
 347:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 348:Drivers/CMSIS/Include/cmsis_gcc.h ****   op2 %= 32U;
 349:Drivers/CMSIS/Include/cmsis_gcc.h ****   if (op2 == 0U)
 350:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 351:Drivers/CMSIS/Include/cmsis_gcc.h ****     return op1;
 352:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 353:Drivers/CMSIS/Include/cmsis_gcc.h ****   return (op1 >> op2) | (op1 << (32U - op2));
 354:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 355:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 356:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 357:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 358:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Breakpoint
 359:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Causes the processor to enter Debug state.
 360:Drivers/CMSIS/Include/cmsis_gcc.h ****            Debug tools can use this to investigate system state when the instruction at a particula
 361:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  is ignored by the processor.
 362:Drivers/CMSIS/Include/cmsis_gcc.h ****                  If required, a debugger can use it to store additional information about the break
 363:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 364:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __BKPT(value)                       __ASM volatile ("bkpt "#value)
ARM GAS  /tmp/cctkHiNQ.s 			page 23


 365:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 366:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 367:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 368:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse bit order of value
 369:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the bit order of the given value.
 370:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 371:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 372:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 373:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __RBIT(uint32_t value)
 374:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 375:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 376:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 377:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 378:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 379:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
 380:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 381:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 382:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t s = (4U /*sizeof(v)*/ * 8U) - 1U; /* extra shift needed at end */
 383:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 384:Drivers/CMSIS/Include/cmsis_gcc.h ****   result = value;                      /* r will be reversed bits of v; first get LSB of v */
 385:Drivers/CMSIS/Include/cmsis_gcc.h ****   for (value >>= 1U; value != 0U; value >>= 1U)
 386:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 387:Drivers/CMSIS/Include/cmsis_gcc.h ****     result <<= 1U;
 388:Drivers/CMSIS/Include/cmsis_gcc.h ****     result |= value & 1U;
 389:Drivers/CMSIS/Include/cmsis_gcc.h ****     s--;
 390:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 391:Drivers/CMSIS/Include/cmsis_gcc.h ****   result <<= s;                        /* shift when v's highest bits are zero */
 392:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 393:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 394:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 395:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 396:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 397:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 398:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Count leading zeros
 399:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Counts the number of leading zeros of a data value.
 400:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to count the leading zeros
 401:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             number of leading zeros in value
 402:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 403:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __CLZ(uint32_t value)
 404:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 405:Drivers/CMSIS/Include/cmsis_gcc.h ****   /* Even though __builtin_clz produces a CLZ instruction on ARM, formally
 406:Drivers/CMSIS/Include/cmsis_gcc.h ****      __builtin_clz(0) is undefined behaviour, so handle this case specially.
 407:Drivers/CMSIS/Include/cmsis_gcc.h ****      This guarantees ARM-compatible results if happening to compile on a non-ARM
 408:Drivers/CMSIS/Include/cmsis_gcc.h ****      target, and ensures the compiler doesn't decide to activate any
 409:Drivers/CMSIS/Include/cmsis_gcc.h ****      optimisations using the logic "value was passed to __builtin_clz, so it
 410:Drivers/CMSIS/Include/cmsis_gcc.h ****      is non-zero".
 411:Drivers/CMSIS/Include/cmsis_gcc.h ****      ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
 412:Drivers/CMSIS/Include/cmsis_gcc.h ****      single CLZ instruction.
 413:Drivers/CMSIS/Include/cmsis_gcc.h ****    */
 414:Drivers/CMSIS/Include/cmsis_gcc.h ****   if (value == 0U)
 415:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 416:Drivers/CMSIS/Include/cmsis_gcc.h ****     return 32U;
 417:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 418:Drivers/CMSIS/Include/cmsis_gcc.h ****   return __builtin_clz(value);
 419:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 420:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 421:Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  /tmp/cctkHiNQ.s 			page 24


 422:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 423:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 424:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 425:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    )
 426:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 427:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDR Exclusive (8 bit)
 428:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive LDR instruction for 8 bit value.
 429:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 430:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             value of type uint8_t at (*ptr)
 431:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 432:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __LDREXB(volatile uint8_t *addr)
 433:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 434:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 435:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 436:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 437:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrexb %0, %1" : "=r" (result) : "Q" (*addr) );
 438:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 439:Drivers/CMSIS/Include/cmsis_gcc.h ****     /* Prior to GCC 4.8, "Q" will be expanded to [rx, #0] which is not
 440:Drivers/CMSIS/Include/cmsis_gcc.h ****        accepted by assembler. So has to use following less efficient pattern.
 441:Drivers/CMSIS/Include/cmsis_gcc.h ****     */
 442:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrexb %0, [%1]" : "=r" (result) : "r" (addr) : "memory" );
 443:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 444:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint8_t) result);    /* Add explicit type cast here */
 445:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 446:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 447:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 448:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 449:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDR Exclusive (16 bit)
 450:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive LDR instruction for 16 bit values.
 451:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 452:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint16_t at (*ptr)
 453:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 454:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint16_t __LDREXH(volatile uint16_t *addr)
 455:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 456:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 457:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 458:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 459:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrexh %0, %1" : "=r" (result) : "Q" (*addr) );
 460:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 461:Drivers/CMSIS/Include/cmsis_gcc.h ****     /* Prior to GCC 4.8, "Q" will be expanded to [rx, #0] which is not
 462:Drivers/CMSIS/Include/cmsis_gcc.h ****        accepted by assembler. So has to use following less efficient pattern.
 463:Drivers/CMSIS/Include/cmsis_gcc.h ****     */
 464:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrexh %0, [%1]" : "=r" (result) : "r" (addr) : "memory" );
 465:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 466:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint16_t) result);    /* Add explicit type cast here */
 467:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 468:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 469:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 470:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 471:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDR Exclusive (32 bit)
 472:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive LDR instruction for 32 bit values.
 473:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 474:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint32_t at (*ptr)
 475:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 476:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
 477:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 478:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
ARM GAS  /tmp/cctkHiNQ.s 			page 25


 479:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 480:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 481:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 482:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 483:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 484:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 485:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 486:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STR Exclusive (8 bit)
 487:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive STR instruction for 8 bit values.
 488:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 489:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 490:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 491:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 492:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 493:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STREXB(uint8_t value, volatile uint8_t *addr)
 494:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 495:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 496:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 497:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strexb %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" ((uint32_t)value) );
 498:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 499:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 500:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 501:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 502:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 503:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STR Exclusive (16 bit)
 504:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive STR instruction for 16 bit values.
 505:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 506:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 507:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 508:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 509:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 510:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STREXH(uint16_t value, volatile uint16_t *addr)
 511:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 512:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 513:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 514:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strexh %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" ((uint32_t)value) );
 515:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 516:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 517:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 518:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 519:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 520:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STR Exclusive (32 bit)
 521:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive STR instruction for 32 bit values.
 522:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 523:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 524:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 525:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 526:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 527:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
 528:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 529:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 530:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 531:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 532:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 533:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 534:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 535:Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  /tmp/cctkHiNQ.s 			page 26


 536:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 537:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Remove the exclusive lock
 538:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Removes the exclusive lock which is created by LDREX.
 539:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 540:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __CLREX(void)
 541:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 542:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("clrex" ::: "memory");
 543:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 544:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 545:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 546:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 547:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 548:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    ) */
 549:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 550:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 551:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 552:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 553:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
 554:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 555:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Signed Saturate
 556:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Saturates a signed value.
 557:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  ARG1  Value to be saturated
 558:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  ARG2  Bit position to saturate to (1..32)
 559:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             Saturated value
 560:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 561:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __SSAT(ARG1, ARG2) \
 562:Drivers/CMSIS/Include/cmsis_gcc.h **** __extension__ \
 563:Drivers/CMSIS/Include/cmsis_gcc.h **** ({                          \
 564:Drivers/CMSIS/Include/cmsis_gcc.h ****   int32_t __RES, __ARG1 = (ARG1); \
 565:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("ssat %0, %1, %2" : "=r" (__RES) :  "I" (ARG2), "r" (__ARG1) : "cc" ); \
 566:Drivers/CMSIS/Include/cmsis_gcc.h ****   __RES; \
 567:Drivers/CMSIS/Include/cmsis_gcc.h ****  })
 568:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 569:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 570:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 571:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Unsigned Saturate
 572:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Saturates an unsigned value.
 573:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  ARG1  Value to be saturated
 574:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  ARG2  Bit position to saturate to (0..31)
 575:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             Saturated value
 576:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 577:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __USAT(ARG1, ARG2) \
 578:Drivers/CMSIS/Include/cmsis_gcc.h **** __extension__ \
 579:Drivers/CMSIS/Include/cmsis_gcc.h **** ({                          \
 580:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t __RES, __ARG1 = (ARG1); \
 581:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("usat %0, %1, %2" : "=r" (__RES) :  "I" (ARG2), "r" (__ARG1) : "cc" ); \
 582:Drivers/CMSIS/Include/cmsis_gcc.h ****   __RES; \
 583:Drivers/CMSIS/Include/cmsis_gcc.h ****  })
 584:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 585:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 586:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 587:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Rotate Right with Extend (32 bit)
 588:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Moves each bit of a bitstring right by one bit.
 589:Drivers/CMSIS/Include/cmsis_gcc.h ****            The carry input is shifted in at the left end of the bitstring.
 590:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to rotate
 591:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Rotated value
 592:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
ARM GAS  /tmp/cctkHiNQ.s 			page 27


 593:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __RRX(uint32_t value)
 594:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 595:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 596:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 597:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("rrx %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 598:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 599:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 600:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 601:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 602:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 603:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDRT Unprivileged (8 bit)
 604:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged LDRT instruction for 8 bit value.
 605:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 606:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             value of type uint8_t at (*ptr)
 607:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 608:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __LDRBT(volatile uint8_t *ptr)
 609:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 610:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 611:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 612:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 613:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrbt %0, %1" : "=r" (result) : "Q" (*ptr) );
 614:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 615:Drivers/CMSIS/Include/cmsis_gcc.h ****     /* Prior to GCC 4.8, "Q" will be expanded to [rx, #0] which is not
 616:Drivers/CMSIS/Include/cmsis_gcc.h ****        accepted by assembler. So has to use following less efficient pattern.
 617:Drivers/CMSIS/Include/cmsis_gcc.h ****     */
 618:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrbt %0, [%1]" : "=r" (result) : "r" (ptr) : "memory" );
 619:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 620:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint8_t) result);    /* Add explicit type cast here */
 621:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 622:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 623:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 624:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 625:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDRT Unprivileged (16 bit)
 626:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged LDRT instruction for 16 bit values.
 627:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 628:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint16_t at (*ptr)
 629:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 630:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint16_t __LDRHT(volatile uint16_t *ptr)
 631:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 632:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 633:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 634:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 635:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrht %0, %1" : "=r" (result) : "Q" (*ptr) );
 636:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 637:Drivers/CMSIS/Include/cmsis_gcc.h ****     /* Prior to GCC 4.8, "Q" will be expanded to [rx, #0] which is not
 638:Drivers/CMSIS/Include/cmsis_gcc.h ****        accepted by assembler. So has to use following less efficient pattern.
 639:Drivers/CMSIS/Include/cmsis_gcc.h ****     */
 640:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrht %0, [%1]" : "=r" (result) : "r" (ptr) : "memory" );
 641:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 642:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint16_t) result);    /* Add explicit type cast here */
 643:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 644:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 645:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 646:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 647:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDRT Unprivileged (32 bit)
 648:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged LDRT instruction for 32 bit values.
 649:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
ARM GAS  /tmp/cctkHiNQ.s 			page 28


 650:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint32_t at (*ptr)
 651:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 652:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __LDRT(volatile uint32_t *ptr)
 653:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 654:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 655:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 656:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrt %0, %1" : "=r" (result) : "Q" (*ptr) );
 657:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 658:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 659:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 660:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 661:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 662:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STRT Unprivileged (8 bit)
 663:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged STRT instruction for 8 bit values.
 664:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 665:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 666:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 667:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STRBT(uint8_t value, volatile uint8_t *ptr)
 668:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 669:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strbt %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) );
 670:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 671:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 672:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 673:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 674:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STRT Unprivileged (16 bit)
 675:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged STRT instruction for 16 bit values.
 676:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 677:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 678:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 679:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STRHT(uint16_t value, volatile uint16_t *ptr)
 680:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 681:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strht %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) );
 682:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 683:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 684:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 685:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 686:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STRT Unprivileged (32 bit)
 687:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged STRT instruction for 32 bit values.
 688:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 689:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 690:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 691:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STRT(uint32_t value, volatile uint32_t *ptr)
 692:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 693:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strt %1, %0" : "=Q" (*ptr) : "r" (value) );
 694:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 695:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 696:Drivers/CMSIS/Include/cmsis_gcc.h **** #else  /* ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 697:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 698:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    ) */
 699:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 700:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 701:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Signed Saturate
 702:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Saturates a signed value.
 703:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to be saturated
 704:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    sat  Bit position to saturate to (1..32)
 705:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             Saturated value
 706:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
ARM GAS  /tmp/cctkHiNQ.s 			page 29


 707:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE int32_t __SSAT(int32_t val, uint32_t sat)
 708:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 709:Drivers/CMSIS/Include/cmsis_gcc.h ****   if ((sat >= 1U) && (sat <= 32U))
 710:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 711:Drivers/CMSIS/Include/cmsis_gcc.h ****     const int32_t max = (int32_t)((1U << (sat - 1U)) - 1U);
 712:Drivers/CMSIS/Include/cmsis_gcc.h ****     const int32_t min = -1 - max ;
 713:Drivers/CMSIS/Include/cmsis_gcc.h ****     if (val > max)
 714:Drivers/CMSIS/Include/cmsis_gcc.h ****     {
 715:Drivers/CMSIS/Include/cmsis_gcc.h ****       return max;
 716:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 717:Drivers/CMSIS/Include/cmsis_gcc.h ****     else if (val < min)
 718:Drivers/CMSIS/Include/cmsis_gcc.h ****     {
 719:Drivers/CMSIS/Include/cmsis_gcc.h ****       return min;
 720:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 721:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 722:Drivers/CMSIS/Include/cmsis_gcc.h ****   return val;
 723:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 724:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 725:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 726:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Unsigned Saturate
 727:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Saturates an unsigned value.
 728:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to be saturated
 729:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    sat  Bit position to saturate to (0..31)
 730:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             Saturated value
 731:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 732:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __USAT(int32_t val, uint32_t sat)
 733:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 734:Drivers/CMSIS/Include/cmsis_gcc.h ****   if (sat <= 31U)
 735:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 736:Drivers/CMSIS/Include/cmsis_gcc.h ****     const uint32_t max = ((1U << sat) - 1U);
 737:Drivers/CMSIS/Include/cmsis_gcc.h ****     if (val > (int32_t)max)
 738:Drivers/CMSIS/Include/cmsis_gcc.h ****     {
 739:Drivers/CMSIS/Include/cmsis_gcc.h ****       return max;
 740:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 741:Drivers/CMSIS/Include/cmsis_gcc.h ****     else if (val < 0)
 742:Drivers/CMSIS/Include/cmsis_gcc.h ****     {
 743:Drivers/CMSIS/Include/cmsis_gcc.h ****       return 0U;
 744:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 745:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 746:Drivers/CMSIS/Include/cmsis_gcc.h ****   return (uint32_t)val;
 747:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 748:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 749:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 750:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 751:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    ) */
 752:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 753:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 754:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 755:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    )
 756:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 757:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire (8 bit)
 758:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDAB instruction for 8 bit value.
 759:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 760:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             value of type uint8_t at (*ptr)
 761:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 762:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __LDAB(volatile uint8_t *ptr)
 763:Drivers/CMSIS/Include/cmsis_gcc.h **** {
ARM GAS  /tmp/cctkHiNQ.s 			page 30


 764:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 765:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 766:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldab %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 767:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint8_t) result);
 768:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 769:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 770:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 771:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 772:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire (16 bit)
 773:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDAH instruction for 16 bit values.
 774:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 775:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint16_t at (*ptr)
 776:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 777:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint16_t __LDAH(volatile uint16_t *ptr)
 778:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 779:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 780:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 781:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldah %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 782:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint16_t) result);
 783:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 784:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 785:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 786:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 787:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire (32 bit)
 788:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDA instruction for 32 bit values.
 789:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 790:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint32_t at (*ptr)
 791:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 792:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __LDA(volatile uint32_t *ptr)
 793:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 794:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 795:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 796:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("lda %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 797:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 798:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 799:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 800:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 801:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 802:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release (8 bit)
 803:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STLB instruction for 8 bit values.
 804:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 805:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 806:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 807:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STLB(uint8_t value, volatile uint8_t *ptr)
 808:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 809:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stlb %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) : "memory" );
 810:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 811:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 812:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 813:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 814:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release (16 bit)
 815:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STLH instruction for 16 bit values.
 816:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 817:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 818:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 819:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STLH(uint16_t value, volatile uint16_t *ptr)
 820:Drivers/CMSIS/Include/cmsis_gcc.h **** {
ARM GAS  /tmp/cctkHiNQ.s 			page 31


 821:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stlh %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) : "memory" );
 822:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 823:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 824:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 825:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 826:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release (32 bit)
 827:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STL instruction for 32 bit values.
 828:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 829:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 830:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 831:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STL(uint32_t value, volatile uint32_t *ptr)
 832:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 833:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stl %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) : "memory" );
 834:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 835:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 836:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 837:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 838:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire Exclusive (8 bit)
 839:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDAB exclusive instruction for 8 bit value.
 840:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 841:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             value of type uint8_t at (*ptr)
 842:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 843:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __LDAEXB(volatile uint8_t *ptr)
 844:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 845:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 846:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 847:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldaexb %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 848:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint8_t) result);
 849:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 850:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 851:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 852:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 853:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire Exclusive (16 bit)
 854:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDAH exclusive instruction for 16 bit values.
 855:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 856:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint16_t at (*ptr)
 857:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 858:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint16_t __LDAEXH(volatile uint16_t *ptr)
 859:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 860:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 861:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 862:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldaexh %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 863:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint16_t) result);
 864:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 865:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 866:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 867:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 868:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire Exclusive (32 bit)
 869:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDA exclusive instruction for 32 bit values.
 870:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 871:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint32_t at (*ptr)
 872:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 873:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __LDAEX(volatile uint32_t *ptr)
 874:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 875:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 876:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 877:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldaex %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
ARM GAS  /tmp/cctkHiNQ.s 			page 32


 878:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 879:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 880:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 881:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 882:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 883:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release Exclusive (8 bit)
 884:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STLB exclusive instruction for 8 bit values.
 885:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 886:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 887:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 888:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 889:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 890:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STLEXB(uint8_t value, volatile uint8_t *ptr)
 891:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 892:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 893:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 894:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stlexb %0, %2, %1" : "=&r" (result), "=Q" (*ptr) : "r" ((uint32_t)value) : "mem
 895:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 896:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 897:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 898:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 899:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 900:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release Exclusive (16 bit)
 901:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STLH exclusive instruction for 16 bit values.
 902:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 903:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 904:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 905:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 906:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 907:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STLEXH(uint16_t value, volatile uint16_t *ptr)
 908:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 909:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 910:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 911:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stlexh %0, %2, %1" : "=&r" (result), "=Q" (*ptr) : "r" ((uint32_t)value) : "mem
 912:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 913:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 914:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 915:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 916:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 917:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release Exclusive (32 bit)
 918:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STL exclusive instruction for 32 bit values.
 919:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 920:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 921:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 922:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 923:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 924:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STLEX(uint32_t value, volatile uint32_t *ptr)
 925:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 926:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 927:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 928:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stlex %0, %2, %1" : "=&r" (result), "=Q" (*ptr) : "r" ((uint32_t)value) : "memo
 929:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 930:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 931:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 932:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 933:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    ) */
 934:Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  /tmp/cctkHiNQ.s 			page 33


 935:Drivers/CMSIS/Include/cmsis_gcc.h **** /*@}*/ /* end of group CMSIS_Core_InstructionInterface */
 936:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 937:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 938:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
 939:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
 940:Drivers/CMSIS/Include/cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
 941:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
 942:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 943:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 944:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 945:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
 946:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing special-purpose register PRIMASK.
 947:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 948:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 949:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __enable_irq(void)
 950:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 951:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
 952:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 953:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 954:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 955:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 956:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
 957:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
 958:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 959:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 960:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __disable_irq(void)
 418              		.loc 2 960 27 view .LVU87
 419              	.LBB10:
 961:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 962:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
 420              		.loc 2 962 3 view .LVU88
 421              		.syntax unified
 422              	@ 962 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 423 0000 72B6     		cpsid i
 424              	@ 0 "" 2
 425              		.thumb
 426              		.syntax unified
 427              	.L21:
 428              	.LBE10:
 429              	.LBE9:
 467:Core/Src/main.c ****   while (1)
 430              		.loc 1 467 3 discriminator 1 view .LVU89
 468:Core/Src/main.c ****   {
 469:Core/Src/main.c ****   }
 431              		.loc 1 469 3 discriminator 1 view .LVU90
 432 0002 FEE7     		b	.L21
 433              		.cfi_endproc
 434              	.LFE142:
 436              		.section	.text.MX_TIM3_Init,"ax",%progbits
 437              		.align	1
 438              		.syntax unified
 439              		.thumb
 440              		.thumb_func
 441              		.fpu fpv4-sp-d16
 443              	MX_TIM3_Init:
 444              	.LFB136:
 261:Core/Src/main.c **** 
ARM GAS  /tmp/cctkHiNQ.s 			page 34


 445              		.loc 1 261 1 view -0
 446              		.cfi_startproc
 447              		@ args = 0, pretend = 0, frame = 56
 448              		@ frame_needed = 0, uses_anonymous_args = 0
 449 0000 00B5     		push	{lr}
 450              	.LCFI8:
 451              		.cfi_def_cfa_offset 4
 452              		.cfi_offset 14, -4
 453 0002 8FB0     		sub	sp, sp, #60
 454              	.LCFI9:
 455              		.cfi_def_cfa_offset 64
 267:Core/Src/main.c ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
 456              		.loc 1 267 3 view .LVU92
 267:Core/Src/main.c ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
 457              		.loc 1 267 26 is_stmt 0 view .LVU93
 458 0004 0023     		movs	r3, #0
 459 0006 0A93     		str	r3, [sp, #40]
 460 0008 0B93     		str	r3, [sp, #44]
 461 000a 0C93     		str	r3, [sp, #48]
 462 000c 0D93     		str	r3, [sp, #52]
 268:Core/Src/main.c ****   TIM_OC_InitTypeDef sConfigOC = {0};
 463              		.loc 1 268 3 is_stmt 1 view .LVU94
 268:Core/Src/main.c ****   TIM_OC_InitTypeDef sConfigOC = {0};
 464              		.loc 1 268 27 is_stmt 0 view .LVU95
 465 000e 0893     		str	r3, [sp, #32]
 466 0010 0993     		str	r3, [sp, #36]
 269:Core/Src/main.c **** 
 467              		.loc 1 269 3 is_stmt 1 view .LVU96
 269:Core/Src/main.c **** 
 468              		.loc 1 269 22 is_stmt 0 view .LVU97
 469 0012 0193     		str	r3, [sp, #4]
 470 0014 0293     		str	r3, [sp, #8]
 471 0016 0393     		str	r3, [sp, #12]
 472 0018 0493     		str	r3, [sp, #16]
 473 001a 0593     		str	r3, [sp, #20]
 474 001c 0693     		str	r3, [sp, #24]
 475 001e 0793     		str	r3, [sp, #28]
 274:Core/Src/main.c ****   htim3.Init.Prescaler = 25-1;
 476              		.loc 1 274 3 is_stmt 1 view .LVU98
 274:Core/Src/main.c ****   htim3.Init.Prescaler = 25-1;
 477              		.loc 1 274 18 is_stmt 0 view .LVU99
 478 0020 2D48     		ldr	r0, .L40
 479 0022 2E4A     		ldr	r2, .L40+4
 480 0024 0260     		str	r2, [r0]
 275:Core/Src/main.c ****   htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 481              		.loc 1 275 3 is_stmt 1 view .LVU100
 275:Core/Src/main.c ****   htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 482              		.loc 1 275 24 is_stmt 0 view .LVU101
 483 0026 1822     		movs	r2, #24
 484 0028 4260     		str	r2, [r0, #4]
 276:Core/Src/main.c ****   htim3.Init.Period = 999;
 485              		.loc 1 276 3 is_stmt 1 view .LVU102
 276:Core/Src/main.c ****   htim3.Init.Period = 999;
 486              		.loc 1 276 26 is_stmt 0 view .LVU103
 487 002a 8360     		str	r3, [r0, #8]
 277:Core/Src/main.c ****   htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 488              		.loc 1 277 3 is_stmt 1 view .LVU104
ARM GAS  /tmp/cctkHiNQ.s 			page 35


 277:Core/Src/main.c ****   htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 489              		.loc 1 277 21 is_stmt 0 view .LVU105
 490 002c 40F2E732 		movw	r2, #999
 491 0030 C260     		str	r2, [r0, #12]
 278:Core/Src/main.c ****   htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 492              		.loc 1 278 3 is_stmt 1 view .LVU106
 278:Core/Src/main.c ****   htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 493              		.loc 1 278 28 is_stmt 0 view .LVU107
 494 0032 0361     		str	r3, [r0, #16]
 279:Core/Src/main.c ****   if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 495              		.loc 1 279 3 is_stmt 1 view .LVU108
 279:Core/Src/main.c ****   if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 496              		.loc 1 279 32 is_stmt 0 view .LVU109
 497 0034 8361     		str	r3, [r0, #24]
 280:Core/Src/main.c ****   {
 498              		.loc 1 280 3 is_stmt 1 view .LVU110
 280:Core/Src/main.c ****   {
 499              		.loc 1 280 7 is_stmt 0 view .LVU111
 500 0036 FFF7FEFF 		bl	HAL_TIM_Base_Init
 501              	.LVL21:
 280:Core/Src/main.c ****   {
 502              		.loc 1 280 6 view .LVU112
 503 003a 0028     		cmp	r0, #0
 504 003c 3BD1     		bne	.L32
 284:Core/Src/main.c ****   if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 505              		.loc 1 284 3 is_stmt 1 view .LVU113
 284:Core/Src/main.c ****   if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 506              		.loc 1 284 34 is_stmt 0 view .LVU114
 507 003e 4FF48053 		mov	r3, #4096
 508 0042 0A93     		str	r3, [sp, #40]
 285:Core/Src/main.c ****   {
 509              		.loc 1 285 3 is_stmt 1 view .LVU115
 285:Core/Src/main.c ****   {
 510              		.loc 1 285 7 is_stmt 0 view .LVU116
 511 0044 0AA9     		add	r1, sp, #40
 512 0046 2448     		ldr	r0, .L40
 513 0048 FFF7FEFF 		bl	HAL_TIM_ConfigClockSource
 514              	.LVL22:
 285:Core/Src/main.c ****   {
 515              		.loc 1 285 6 view .LVU117
 516 004c 0028     		cmp	r0, #0
 517 004e 34D1     		bne	.L33
 289:Core/Src/main.c ****   {
 518              		.loc 1 289 3 is_stmt 1 view .LVU118
 289:Core/Src/main.c ****   {
 519              		.loc 1 289 7 is_stmt 0 view .LVU119
 520 0050 2148     		ldr	r0, .L40
 521 0052 FFF7FEFF 		bl	HAL_TIM_PWM_Init
 522              	.LVL23:
 289:Core/Src/main.c ****   {
 523              		.loc 1 289 6 view .LVU120
 524 0056 0028     		cmp	r0, #0
 525 0058 31D1     		bne	.L34
 293:Core/Src/main.c ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 526              		.loc 1 293 3 is_stmt 1 view .LVU121
 293:Core/Src/main.c ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 527              		.loc 1 293 37 is_stmt 0 view .LVU122
ARM GAS  /tmp/cctkHiNQ.s 			page 36


 528 005a 0023     		movs	r3, #0
 529 005c 0893     		str	r3, [sp, #32]
 294:Core/Src/main.c ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 530              		.loc 1 294 3 is_stmt 1 view .LVU123
 294:Core/Src/main.c ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 531              		.loc 1 294 33 is_stmt 0 view .LVU124
 532 005e 0993     		str	r3, [sp, #36]
 295:Core/Src/main.c ****   {
 533              		.loc 1 295 3 is_stmt 1 view .LVU125
 295:Core/Src/main.c ****   {
 534              		.loc 1 295 7 is_stmt 0 view .LVU126
 535 0060 08A9     		add	r1, sp, #32
 536 0062 1D48     		ldr	r0, .L40
 537 0064 FFF7FEFF 		bl	HAL_TIMEx_MasterConfigSynchronization
 538              	.LVL24:
 295:Core/Src/main.c ****   {
 539              		.loc 1 295 6 view .LVU127
 540 0068 58BB     		cbnz	r0, .L35
 299:Core/Src/main.c ****   sConfigOC.Pulse = 999;
 541              		.loc 1 299 3 is_stmt 1 view .LVU128
 299:Core/Src/main.c ****   sConfigOC.Pulse = 999;
 542              		.loc 1 299 20 is_stmt 0 view .LVU129
 543 006a 6023     		movs	r3, #96
 544 006c 0193     		str	r3, [sp, #4]
 300:Core/Src/main.c ****   sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 545              		.loc 1 300 3 is_stmt 1 view .LVU130
 300:Core/Src/main.c ****   sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 546              		.loc 1 300 19 is_stmt 0 view .LVU131
 547 006e 40F2E733 		movw	r3, #999
 548 0072 0293     		str	r3, [sp, #8]
 301:Core/Src/main.c ****   sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 549              		.loc 1 301 3 is_stmt 1 view .LVU132
 301:Core/Src/main.c ****   sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 550              		.loc 1 301 24 is_stmt 0 view .LVU133
 551 0074 0022     		movs	r2, #0
 552 0076 0392     		str	r2, [sp, #12]
 302:Core/Src/main.c ****   if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 553              		.loc 1 302 3 is_stmt 1 view .LVU134
 302:Core/Src/main.c ****   if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 554              		.loc 1 302 24 is_stmt 0 view .LVU135
 555 0078 0592     		str	r2, [sp, #20]
 303:Core/Src/main.c ****   {
 556              		.loc 1 303 3 is_stmt 1 view .LVU136
 303:Core/Src/main.c ****   {
 557              		.loc 1 303 7 is_stmt 0 view .LVU137
 558 007a 01A9     		add	r1, sp, #4
 559 007c 1648     		ldr	r0, .L40
 560 007e FFF7FEFF 		bl	HAL_TIM_PWM_ConfigChannel
 561              	.LVL25:
 303:Core/Src/main.c ****   {
 562              		.loc 1 303 6 view .LVU138
 563 0082 00BB     		cbnz	r0, .L36
 307:Core/Src/main.c ****   {
 564              		.loc 1 307 3 is_stmt 1 view .LVU139
 307:Core/Src/main.c ****   {
 565              		.loc 1 307 7 is_stmt 0 view .LVU140
 566 0084 0422     		movs	r2, #4
ARM GAS  /tmp/cctkHiNQ.s 			page 37


 567 0086 0DEB0201 		add	r1, sp, r2
 568 008a 1348     		ldr	r0, .L40
 569 008c FFF7FEFF 		bl	HAL_TIM_PWM_ConfigChannel
 570              	.LVL26:
 307:Core/Src/main.c ****   {
 571              		.loc 1 307 6 view .LVU141
 572 0090 D8B9     		cbnz	r0, .L37
 311:Core/Src/main.c ****   {
 573              		.loc 1 311 3 is_stmt 1 view .LVU142
 311:Core/Src/main.c ****   {
 574              		.loc 1 311 7 is_stmt 0 view .LVU143
 575 0092 0822     		movs	r2, #8
 576 0094 01A9     		add	r1, sp, #4
 577 0096 1048     		ldr	r0, .L40
 578 0098 FFF7FEFF 		bl	HAL_TIM_PWM_ConfigChannel
 579              	.LVL27:
 311:Core/Src/main.c ****   {
 580              		.loc 1 311 6 view .LVU144
 581 009c B8B9     		cbnz	r0, .L38
 315:Core/Src/main.c ****   {
 582              		.loc 1 315 3 is_stmt 1 view .LVU145
 315:Core/Src/main.c ****   {
 583              		.loc 1 315 7 is_stmt 0 view .LVU146
 584 009e 0C22     		movs	r2, #12
 585 00a0 01A9     		add	r1, sp, #4
 586 00a2 0D48     		ldr	r0, .L40
 587 00a4 FFF7FEFF 		bl	HAL_TIM_PWM_ConfigChannel
 588              	.LVL28:
 315:Core/Src/main.c ****   {
 589              		.loc 1 315 6 view .LVU147
 590 00a8 98B9     		cbnz	r0, .L39
 322:Core/Src/main.c **** 
 591              		.loc 1 322 3 is_stmt 1 view .LVU148
 592 00aa 0B48     		ldr	r0, .L40
 593 00ac FFF7FEFF 		bl	HAL_TIM_MspPostInit
 594              	.LVL29:
 324:Core/Src/main.c **** 
 595              		.loc 1 324 1 is_stmt 0 view .LVU149
 596 00b0 0FB0     		add	sp, sp, #60
 597              	.LCFI10:
 598              		.cfi_remember_state
 599              		.cfi_def_cfa_offset 4
 600              		@ sp needed
 601 00b2 5DF804FB 		ldr	pc, [sp], #4
 602              	.L32:
 603              	.LCFI11:
 604              		.cfi_restore_state
 282:Core/Src/main.c ****   }
 605              		.loc 1 282 5 is_stmt 1 view .LVU150
 606 00b6 FFF7FEFF 		bl	Error_Handler
 607              	.LVL30:
 608              	.L33:
 287:Core/Src/main.c ****   }
 609              		.loc 1 287 5 view .LVU151
 610 00ba FFF7FEFF 		bl	Error_Handler
 611              	.LVL31:
 612              	.L34:
ARM GAS  /tmp/cctkHiNQ.s 			page 38


 291:Core/Src/main.c ****   }
 613              		.loc 1 291 5 view .LVU152
 614 00be FFF7FEFF 		bl	Error_Handler
 615              	.LVL32:
 616              	.L35:
 297:Core/Src/main.c ****   }
 617              		.loc 1 297 5 view .LVU153
 618 00c2 FFF7FEFF 		bl	Error_Handler
 619              	.LVL33:
 620              	.L36:
 305:Core/Src/main.c ****   }
 621              		.loc 1 305 5 view .LVU154
 622 00c6 FFF7FEFF 		bl	Error_Handler
 623              	.LVL34:
 624              	.L37:
 309:Core/Src/main.c ****   }
 625              		.loc 1 309 5 view .LVU155
 626 00ca FFF7FEFF 		bl	Error_Handler
 627              	.LVL35:
 628              	.L38:
 313:Core/Src/main.c ****   }
 629              		.loc 1 313 5 view .LVU156
 630 00ce FFF7FEFF 		bl	Error_Handler
 631              	.LVL36:
 632              	.L39:
 317:Core/Src/main.c ****   }
 633              		.loc 1 317 5 view .LVU157
 634 00d2 FFF7FEFF 		bl	Error_Handler
 635              	.LVL37:
 636              	.L41:
 637 00d6 00BF     		.align	2
 638              	.L40:
 639 00d8 00000000 		.word	htim3
 640 00dc 00040040 		.word	1073742848
 641              		.cfi_endproc
 642              	.LFE136:
 644              		.section	.text.MX_USART1_UART_Init,"ax",%progbits
 645              		.align	1
 646              		.syntax unified
 647              		.thumb
 648              		.thumb_func
 649              		.fpu fpv4-sp-d16
 651              	MX_USART1_UART_Init:
 652              	.LFB137:
 332:Core/Src/main.c **** 
 653              		.loc 1 332 1 view -0
 654              		.cfi_startproc
 655              		@ args = 0, pretend = 0, frame = 0
 656              		@ frame_needed = 0, uses_anonymous_args = 0
 657 0000 08B5     		push	{r3, lr}
 658              	.LCFI12:
 659              		.cfi_def_cfa_offset 8
 660              		.cfi_offset 3, -8
 661              		.cfi_offset 14, -4
 341:Core/Src/main.c ****   huart1.Init.BaudRate = 115200;
 662              		.loc 1 341 3 view .LVU159
 341:Core/Src/main.c ****   huart1.Init.BaudRate = 115200;
ARM GAS  /tmp/cctkHiNQ.s 			page 39


 663              		.loc 1 341 19 is_stmt 0 view .LVU160
 664 0002 0A48     		ldr	r0, .L46
 665 0004 0A4B     		ldr	r3, .L46+4
 666 0006 0360     		str	r3, [r0]
 342:Core/Src/main.c ****   huart1.Init.WordLength = UART_WORDLENGTH_8B;
 667              		.loc 1 342 3 is_stmt 1 view .LVU161
 342:Core/Src/main.c ****   huart1.Init.WordLength = UART_WORDLENGTH_8B;
 668              		.loc 1 342 24 is_stmt 0 view .LVU162
 669 0008 4FF4E133 		mov	r3, #115200
 670 000c 4360     		str	r3, [r0, #4]
 343:Core/Src/main.c ****   huart1.Init.StopBits = UART_STOPBITS_1;
 671              		.loc 1 343 3 is_stmt 1 view .LVU163
 343:Core/Src/main.c ****   huart1.Init.StopBits = UART_STOPBITS_1;
 672              		.loc 1 343 26 is_stmt 0 view .LVU164
 673 000e 0023     		movs	r3, #0
 674 0010 8360     		str	r3, [r0, #8]
 344:Core/Src/main.c ****   huart1.Init.Parity = UART_PARITY_NONE;
 675              		.loc 1 344 3 is_stmt 1 view .LVU165
 344:Core/Src/main.c ****   huart1.Init.Parity = UART_PARITY_NONE;
 676              		.loc 1 344 24 is_stmt 0 view .LVU166
 677 0012 C360     		str	r3, [r0, #12]
 345:Core/Src/main.c ****   huart1.Init.Mode = UART_MODE_TX_RX;
 678              		.loc 1 345 3 is_stmt 1 view .LVU167
 345:Core/Src/main.c ****   huart1.Init.Mode = UART_MODE_TX_RX;
 679              		.loc 1 345 22 is_stmt 0 view .LVU168
 680 0014 0361     		str	r3, [r0, #16]
 346:Core/Src/main.c ****   huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 681              		.loc 1 346 3 is_stmt 1 view .LVU169
 346:Core/Src/main.c ****   huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 682              		.loc 1 346 20 is_stmt 0 view .LVU170
 683 0016 0C22     		movs	r2, #12
 684 0018 4261     		str	r2, [r0, #20]
 347:Core/Src/main.c ****   huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 685              		.loc 1 347 3 is_stmt 1 view .LVU171
 347:Core/Src/main.c ****   huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 686              		.loc 1 347 25 is_stmt 0 view .LVU172
 687 001a 8361     		str	r3, [r0, #24]
 348:Core/Src/main.c ****   if (HAL_UART_Init(&huart1) != HAL_OK)
 688              		.loc 1 348 3 is_stmt 1 view .LVU173
 348:Core/Src/main.c ****   if (HAL_UART_Init(&huart1) != HAL_OK)
 689              		.loc 1 348 28 is_stmt 0 view .LVU174
 690 001c C361     		str	r3, [r0, #28]
 349:Core/Src/main.c ****   {
 691              		.loc 1 349 3 is_stmt 1 view .LVU175
 349:Core/Src/main.c ****   {
 692              		.loc 1 349 7 is_stmt 0 view .LVU176
 693 001e FFF7FEFF 		bl	HAL_UART_Init
 694              	.LVL38:
 349:Core/Src/main.c ****   {
 695              		.loc 1 349 6 view .LVU177
 696 0022 00B9     		cbnz	r0, .L45
 357:Core/Src/main.c **** 
 697              		.loc 1 357 1 view .LVU178
 698 0024 08BD     		pop	{r3, pc}
 699              	.L45:
 351:Core/Src/main.c ****   }
 700              		.loc 1 351 5 is_stmt 1 view .LVU179
ARM GAS  /tmp/cctkHiNQ.s 			page 40


 701 0026 FFF7FEFF 		bl	Error_Handler
 702              	.LVL39:
 703              	.L47:
 704 002a 00BF     		.align	2
 705              	.L46:
 706 002c 00000000 		.word	huart1
 707 0030 00100140 		.word	1073811456
 708              		.cfi_endproc
 709              	.LFE137:
 711              		.section	.text.SystemClock_Config,"ax",%progbits
 712              		.align	1
 713              		.global	SystemClock_Config
 714              		.syntax unified
 715              		.thumb
 716              		.thumb_func
 717              		.fpu fpv4-sp-d16
 719              	SystemClock_Config:
 720              	.LFB135:
 215:Core/Src/main.c ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 721              		.loc 1 215 1 view -0
 722              		.cfi_startproc
 723              		@ args = 0, pretend = 0, frame = 80
 724              		@ frame_needed = 0, uses_anonymous_args = 0
 725 0000 00B5     		push	{lr}
 726              	.LCFI13:
 727              		.cfi_def_cfa_offset 4
 728              		.cfi_offset 14, -4
 729 0002 95B0     		sub	sp, sp, #84
 730              	.LCFI14:
 731              		.cfi_def_cfa_offset 88
 216:Core/Src/main.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 732              		.loc 1 216 3 view .LVU181
 216:Core/Src/main.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 733              		.loc 1 216 22 is_stmt 0 view .LVU182
 734 0004 3022     		movs	r2, #48
 735 0006 0021     		movs	r1, #0
 736 0008 08A8     		add	r0, sp, #32
 737 000a FFF7FEFF 		bl	memset
 738              	.LVL40:
 217:Core/Src/main.c **** 
 739              		.loc 1 217 3 is_stmt 1 view .LVU183
 217:Core/Src/main.c **** 
 740              		.loc 1 217 22 is_stmt 0 view .LVU184
 741 000e 0023     		movs	r3, #0
 742 0010 0393     		str	r3, [sp, #12]
 743 0012 0493     		str	r3, [sp, #16]
 744 0014 0593     		str	r3, [sp, #20]
 745 0016 0693     		str	r3, [sp, #24]
 746 0018 0793     		str	r3, [sp, #28]
 221:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 747              		.loc 1 221 3 is_stmt 1 view .LVU185
 748              	.LBB11:
 221:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 749              		.loc 1 221 3 view .LVU186
 750 001a 0193     		str	r3, [sp, #4]
 221:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 751              		.loc 1 221 3 view .LVU187
ARM GAS  /tmp/cctkHiNQ.s 			page 41


 752 001c 204A     		ldr	r2, .L54
 753 001e 116C     		ldr	r1, [r2, #64]
 754 0020 41F08051 		orr	r1, r1, #268435456
 755 0024 1164     		str	r1, [r2, #64]
 221:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 756              		.loc 1 221 3 view .LVU188
 757 0026 126C     		ldr	r2, [r2, #64]
 758 0028 02F08052 		and	r2, r2, #268435456
 759 002c 0192     		str	r2, [sp, #4]
 221:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 760              		.loc 1 221 3 view .LVU189
 761 002e 019A     		ldr	r2, [sp, #4]
 762              	.LBE11:
 222:Core/Src/main.c **** 
 763              		.loc 1 222 3 view .LVU190
 764              	.LBB12:
 222:Core/Src/main.c **** 
 765              		.loc 1 222 3 view .LVU191
 766 0030 0293     		str	r3, [sp, #8]
 222:Core/Src/main.c **** 
 767              		.loc 1 222 3 view .LVU192
 768 0032 1C4A     		ldr	r2, .L54+4
 769 0034 1368     		ldr	r3, [r2]
 770 0036 23F44043 		bic	r3, r3, #49152
 771 003a 43F40043 		orr	r3, r3, #32768
 772 003e 1360     		str	r3, [r2]
 222:Core/Src/main.c **** 
 773              		.loc 1 222 3 view .LVU193
 774 0040 1368     		ldr	r3, [r2]
 775 0042 03F44043 		and	r3, r3, #49152
 776 0046 0293     		str	r3, [sp, #8]
 222:Core/Src/main.c **** 
 777              		.loc 1 222 3 view .LVU194
 778 0048 029B     		ldr	r3, [sp, #8]
 779              	.LBE12:
 227:Core/Src/main.c ****   RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 780              		.loc 1 227 3 view .LVU195
 227:Core/Src/main.c ****   RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 781              		.loc 1 227 36 is_stmt 0 view .LVU196
 782 004a 0123     		movs	r3, #1
 783 004c 0893     		str	r3, [sp, #32]
 228:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 784              		.loc 1 228 3 is_stmt 1 view .LVU197
 228:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 785              		.loc 1 228 30 is_stmt 0 view .LVU198
 786 004e 4FF48033 		mov	r3, #65536
 787 0052 0993     		str	r3, [sp, #36]
 229:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 788              		.loc 1 229 3 is_stmt 1 view .LVU199
 229:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 789              		.loc 1 229 34 is_stmt 0 view .LVU200
 790 0054 0223     		movs	r3, #2
 791 0056 0E93     		str	r3, [sp, #56]
 230:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLM = 25;
 792              		.loc 1 230 3 is_stmt 1 view .LVU201
 230:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLM = 25;
 793              		.loc 1 230 35 is_stmt 0 view .LVU202
ARM GAS  /tmp/cctkHiNQ.s 			page 42


 794 0058 4FF48002 		mov	r2, #4194304
 795 005c 0F92     		str	r2, [sp, #60]
 231:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLN = 168;
 796              		.loc 1 231 3 is_stmt 1 view .LVU203
 231:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLN = 168;
 797              		.loc 1 231 30 is_stmt 0 view .LVU204
 798 005e 1922     		movs	r2, #25
 799 0060 1092     		str	r2, [sp, #64]
 232:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800              		.loc 1 232 3 is_stmt 1 view .LVU205
 232:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 801              		.loc 1 232 30 is_stmt 0 view .LVU206
 802 0062 A822     		movs	r2, #168
 803 0064 1192     		str	r2, [sp, #68]
 233:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLQ = 4;
 804              		.loc 1 233 3 is_stmt 1 view .LVU207
 233:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLQ = 4;
 805              		.loc 1 233 30 is_stmt 0 view .LVU208
 806 0066 1293     		str	r3, [sp, #72]
 234:Core/Src/main.c ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 807              		.loc 1 234 3 is_stmt 1 view .LVU209
 234:Core/Src/main.c ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 808              		.loc 1 234 30 is_stmt 0 view .LVU210
 809 0068 0423     		movs	r3, #4
 810 006a 1393     		str	r3, [sp, #76]
 235:Core/Src/main.c ****   {
 811              		.loc 1 235 3 is_stmt 1 view .LVU211
 235:Core/Src/main.c ****   {
 812              		.loc 1 235 7 is_stmt 0 view .LVU212
 813 006c 08A8     		add	r0, sp, #32
 814 006e FFF7FEFF 		bl	HAL_RCC_OscConfig
 815              	.LVL41:
 235:Core/Src/main.c ****   {
 816              		.loc 1 235 6 view .LVU213
 817 0072 80B9     		cbnz	r0, .L52
 242:Core/Src/main.c ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 818              		.loc 1 242 3 is_stmt 1 view .LVU214
 242:Core/Src/main.c ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 819              		.loc 1 242 31 is_stmt 0 view .LVU215
 820 0074 0F23     		movs	r3, #15
 821 0076 0393     		str	r3, [sp, #12]
 244:Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 822              		.loc 1 244 3 is_stmt 1 view .LVU216
 244:Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 823              		.loc 1 244 34 is_stmt 0 view .LVU217
 824 0078 0221     		movs	r1, #2
 825 007a 0491     		str	r1, [sp, #16]
 245:Core/Src/main.c ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 826              		.loc 1 245 3 is_stmt 1 view .LVU218
 245:Core/Src/main.c ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 827              		.loc 1 245 35 is_stmt 0 view .LVU219
 828 007c 0023     		movs	r3, #0
 829 007e 0593     		str	r3, [sp, #20]
 246:Core/Src/main.c ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 830              		.loc 1 246 3 is_stmt 1 view .LVU220
 246:Core/Src/main.c ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 831              		.loc 1 246 36 is_stmt 0 view .LVU221
ARM GAS  /tmp/cctkHiNQ.s 			page 43


 832 0080 4FF48052 		mov	r2, #4096
 833 0084 0692     		str	r2, [sp, #24]
 247:Core/Src/main.c **** 
 834              		.loc 1 247 3 is_stmt 1 view .LVU222
 247:Core/Src/main.c **** 
 835              		.loc 1 247 36 is_stmt 0 view .LVU223
 836 0086 0793     		str	r3, [sp, #28]
 249:Core/Src/main.c ****   {
 837              		.loc 1 249 3 is_stmt 1 view .LVU224
 249:Core/Src/main.c ****   {
 838              		.loc 1 249 7 is_stmt 0 view .LVU225
 839 0088 03A8     		add	r0, sp, #12
 840 008a FFF7FEFF 		bl	HAL_RCC_ClockConfig
 841              	.LVL42:
 249:Core/Src/main.c ****   {
 842              		.loc 1 249 6 view .LVU226
 843 008e 20B9     		cbnz	r0, .L53
 253:Core/Src/main.c **** 
 844              		.loc 1 253 1 view .LVU227
 845 0090 15B0     		add	sp, sp, #84
 846              	.LCFI15:
 847              		.cfi_remember_state
 848              		.cfi_def_cfa_offset 4
 849              		@ sp needed
 850 0092 5DF804FB 		ldr	pc, [sp], #4
 851              	.L52:
 852              	.LCFI16:
 853              		.cfi_restore_state
 237:Core/Src/main.c ****   }
 854              		.loc 1 237 5 is_stmt 1 view .LVU228
 855 0096 FFF7FEFF 		bl	Error_Handler
 856              	.LVL43:
 857              	.L53:
 251:Core/Src/main.c ****   }
 858              		.loc 1 251 5 view .LVU229
 859 009a FFF7FEFF 		bl	Error_Handler
 860              	.LVL44:
 861              	.L55:
 862 009e 00BF     		.align	2
 863              	.L54:
 864 00a0 00380240 		.word	1073887232
 865 00a4 00700040 		.word	1073770496
 866              		.cfi_endproc
 867              	.LFE135:
 869              		.section	.text.main,"ax",%progbits
 870              		.align	1
 871              		.global	main
 872              		.syntax unified
 873              		.thumb
 874              		.thumb_func
 875              		.fpu fpv4-sp-d16
 877              	main:
 878              	.LFB134:
  87:Core/Src/main.c **** 
 879              		.loc 1 87 1 view -0
 880              		.cfi_startproc
 881              		@ Volatile: function does not return.
ARM GAS  /tmp/cctkHiNQ.s 			page 44


 882              		@ args = 0, pretend = 0, frame = 0
 883              		@ frame_needed = 0, uses_anonymous_args = 0
 884 0000 08B5     		push	{r3, lr}
 885              	.LCFI17:
 886              		.cfi_def_cfa_offset 8
 887              		.cfi_offset 3, -8
 888              		.cfi_offset 14, -4
  96:Core/Src/main.c **** 
 889              		.loc 1 96 3 view .LVU231
 890 0002 FFF7FEFF 		bl	HAL_Init
 891              	.LVL45:
 103:Core/Src/main.c **** 
 892              		.loc 1 103 3 view .LVU232
 893 0006 FFF7FEFF 		bl	SystemClock_Config
 894              	.LVL46:
 110:Core/Src/main.c ****   MX_DMA_Init();
 895              		.loc 1 110 3 view .LVU233
 896 000a FFF7FEFF 		bl	MX_GPIO_Init
 897              	.LVL47:
 111:Core/Src/main.c ****   MX_TIM3_Init();
 898              		.loc 1 111 3 view .LVU234
 899 000e FFF7FEFF 		bl	MX_DMA_Init
 900              	.LVL48:
 112:Core/Src/main.c ****   MX_USART1_UART_Init();
 901              		.loc 1 112 3 view .LVU235
 902 0012 FFF7FEFF 		bl	MX_TIM3_Init
 903              	.LVL49:
 113:Core/Src/main.c ****   /* USER CODE BEGIN 2 */
 904              		.loc 1 113 3 view .LVU236
 905 0016 FFF7FEFF 		bl	MX_USART1_UART_Init
 906              	.LVL50:
 116:Core/Src/main.c **** 				HAL_GPIO_WritePin(GPIOC, GPIO_FR_Pin, GPIO_PIN_RESET);
 907              		.loc 1 116 6 view .LVU237
 908 001a 3E4C     		ldr	r4, .L63
 909 001c 0022     		movs	r2, #0
 910 001e 4021     		movs	r1, #64
 911 0020 2046     		mov	r0, r4
 912 0022 FFF7FEFF 		bl	HAL_GPIO_WritePin
 913              	.LVL51:
 117:Core/Src/main.c **** 				HAL_GPIO_WritePin(GPIOC, GPIO_BL_Pin, GPIO_PIN_RESET);
 914              		.loc 1 117 5 view .LVU238
 915 0026 0022     		movs	r2, #0
 916 0028 8021     		movs	r1, #128
 917 002a 2046     		mov	r0, r4
 918 002c FFF7FEFF 		bl	HAL_GPIO_WritePin
 919              	.LVL52:
 118:Core/Src/main.c **** 				HAL_GPIO_WritePin(GPIOC, GPIO_BR_Pin, GPIO_PIN_RESET);
 920              		.loc 1 118 5 view .LVU239
 921 0030 0022     		movs	r2, #0
 922 0032 4FF48071 		mov	r1, #256
 923 0036 2046     		mov	r0, r4
 924 0038 FFF7FEFF 		bl	HAL_GPIO_WritePin
 925              	.LVL53:
 119:Core/Src/main.c **** 
 926              		.loc 1 119 5 view .LVU240
 927 003c 0022     		movs	r2, #0
 928 003e 4FF40071 		mov	r1, #512
ARM GAS  /tmp/cctkHiNQ.s 			page 45


 929 0042 2046     		mov	r0, r4
 930 0044 FFF7FEFF 		bl	HAL_GPIO_WritePin
 931              	.LVL54:
 121:Core/Src/main.c ****   HAL_UART_Receive_IT(&huart1,&recvd_data,1); //receive data from data buffer interrupt mode
 932              		.loc 1 121 3 view .LVU241
 933 0048 334B     		ldr	r3, .L63+4
 934 004a 1D68     		ldr	r5, [r3]
 121:Core/Src/main.c ****   HAL_UART_Receive_IT(&huart1,&recvd_data,1); //receive data from data buffer interrupt mode
 935              		.loc 1 121 52 is_stmt 0 view .LVU242
 936 004c 2846     		mov	r0, r5
 937 004e FFF7FEFF 		bl	strlen
 938              	.LVL55:
 121:Core/Src/main.c ****   HAL_UART_Receive_IT(&huart1,&recvd_data,1); //receive data from data buffer interrupt mode
 939              		.loc 1 121 3 view .LVU243
 940 0052 324C     		ldr	r4, .L63+8
 941 0054 82B2     		uxth	r2, r0
 942 0056 2946     		mov	r1, r5
 943 0058 2046     		mov	r0, r4
 944 005a FFF7FEFF 		bl	HAL_UART_Transmit_IT
 945              	.LVL56:
 122:Core/Src/main.c **** 
 946              		.loc 1 122 3 is_stmt 1 view .LVU244
 947 005e 0122     		movs	r2, #1
 948 0060 2F49     		ldr	r1, .L63+12
 949 0062 2046     		mov	r0, r4
 950 0064 FFF7FEFF 		bl	HAL_UART_Receive_IT
 951              	.LVL57:
 952 0068 2AE0     		b	.L57
 953              	.L62:
 135:Core/Src/main.c ****     }
 954              		.loc 1 135 7 view .LVU245
 955 006a 2E48     		ldr	r0, .L63+16
 956 006c FFF7FEFF 		bl	Get_Command
 957              	.LVL58:
 958 0070 2AE0     		b	.L58
 959              	.L59:
 155:Core/Src/main.c **** 
 960              		.loc 1 155 5 view .LVU246
 961 0072 0022     		movs	r2, #0
 962 0074 4FF40051 		mov	r1, #8192
 963 0078 2648     		ldr	r0, .L63
 964 007a FFF7FEFF 		bl	HAL_GPIO_WritePin
 965              	.LVL59:
 157:Core/Src/main.c **** 
 966              		.loc 1 157 5 view .LVU247
 967 007e 4FF4FA60 		mov	r0, #2000
 968 0082 FFF7FEFF 		bl	HAL_Delay
 969              	.LVL60:
 159:Core/Src/main.c **** 		  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 970              		.loc 1 159 5 view .LVU248
 971 0086 284C     		ldr	r4, .L63+20
 972 0088 0021     		movs	r1, #0
 973 008a 2046     		mov	r0, r4
 974 008c FFF7FEFF 		bl	HAL_TIM_PWM_Start
 975              	.LVL61:
 160:Core/Src/main.c **** 		  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 976              		.loc 1 160 5 view .LVU249
ARM GAS  /tmp/cctkHiNQ.s 			page 46


 977 0090 0421     		movs	r1, #4
 978 0092 2046     		mov	r0, r4
 979 0094 FFF7FEFF 		bl	HAL_TIM_PWM_Start
 980              	.LVL62:
 161:Core/Src/main.c **** 		  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 981              		.loc 1 161 5 view .LVU250
 982 0098 0821     		movs	r1, #8
 983 009a 2046     		mov	r0, r4
 984 009c FFF7FEFF 		bl	HAL_TIM_PWM_Start
 985              	.LVL63:
 162:Core/Src/main.c **** 
 986              		.loc 1 162 5 view .LVU251
 987 00a0 0C21     		movs	r1, #12
 988 00a2 2046     		mov	r0, r4
 989 00a4 FFF7FEFF 		bl	HAL_TIM_PWM_Start
 990              	.LVL64:
 194:Core/Src/main.c ****     TIM2 -> CCR2 = 0;
 991              		.loc 1 194 5 view .LVU252
 194:Core/Src/main.c ****     TIM2 -> CCR2 = 0;
 992              		.loc 1 194 18 is_stmt 0 view .LVU253
 993 00a8 204B     		ldr	r3, .L63+24
 994 00aa 4FF47A72 		mov	r2, #1000
 995 00ae 9A63     		str	r2, [r3, #56]
 195:Core/Src/main.c **** 
 996              		.loc 1 195 5 is_stmt 1 view .LVU254
 195:Core/Src/main.c **** 
 997              		.loc 1 195 18 is_stmt 0 view .LVU255
 998 00b0 4FF08043 		mov	r3, #1073741824
 999 00b4 0022     		movs	r2, #0
 1000 00b6 9A63     		str	r2, [r3, #56]
 203:Core/Src/main.c **** 
 1001              		.loc 1 203 4 is_stmt 1 view .LVU256
 1002 00b8 4FF47A60 		mov	r0, #4000
 1003 00bc FFF7FEFF 		bl	HAL_Delay
 1004              	.LVL65:
 1005              	.L57:
 128:Core/Src/main.c ****   {
 1006              		.loc 1 128 3 view .LVU257
 134:Core/Src/main.c ****       Get_Command(data_buffer);
 1007              		.loc 1 134 5 view .LVU258
 134:Core/Src/main.c ****       Get_Command(data_buffer);
 1008              		.loc 1 134 8 is_stmt 0 view .LVU259
 1009 00c0 1B4B     		ldr	r3, .L63+28
 1010 00c2 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 134:Core/Src/main.c ****       Get_Command(data_buffer);
 1011              		.loc 1 134 7 view .LVU260
 1012 00c4 002B     		cmp	r3, #0
 1013 00c6 D0D1     		bne	.L62
 1014              	.L58:
 139:Core/Src/main.c **** 
 1015              		.loc 1 139 5 is_stmt 1 view .LVU261
 139:Core/Src/main.c **** 
 1016              		.loc 1 139 25 is_stmt 0 view .LVU262
 1017 00c8 0121     		movs	r1, #1
 1018 00ca 1A48     		ldr	r0, .L63+32
 1019 00cc FFF7FEFF 		bl	HAL_GPIO_ReadPin
 1020              	.LVL66:
ARM GAS  /tmp/cctkHiNQ.s 			page 47


 139:Core/Src/main.c **** 
 1021              		.loc 1 139 8 view .LVU263
 1022 00d0 0128     		cmp	r0, #1
 1023 00d2 CED1     		bne	.L59
 141:Core/Src/main.c **** 
 1024              		.loc 1 141 5 is_stmt 1 view .LVU264
 1025 00d4 0122     		movs	r2, #1
 1026 00d6 4FF40051 		mov	r1, #8192
 1027 00da 0E48     		ldr	r0, .L63
 1028 00dc FFF7FEFF 		bl	HAL_GPIO_WritePin
 1029              	.LVL67:
 143:Core/Src/main.c ****       TIM3 -> CCR2 = 1000;
 1030              		.loc 1 143 7 view .LVU265
 143:Core/Src/main.c ****       TIM3 -> CCR2 = 1000;
 1031              		.loc 1 143 20 is_stmt 0 view .LVU266
 1032 00e0 154B     		ldr	r3, .L63+36
 1033 00e2 4FF47A72 		mov	r2, #1000
 1034 00e6 5A63     		str	r2, [r3, #52]
 144:Core/Src/main.c ****       TIM3 -> CCR3 = 1000;
 1035              		.loc 1 144 7 is_stmt 1 view .LVU267
 144:Core/Src/main.c ****       TIM3 -> CCR3 = 1000;
 1036              		.loc 1 144 20 is_stmt 0 view .LVU268
 1037 00e8 9A63     		str	r2, [r3, #56]
 145:Core/Src/main.c ****       TIM3 -> CCR4 = 1000;
 1038              		.loc 1 145 7 is_stmt 1 view .LVU269
 145:Core/Src/main.c ****       TIM3 -> CCR4 = 1000;
 1039              		.loc 1 145 20 is_stmt 0 view .LVU270
 1040 00ea DA63     		str	r2, [r3, #60]
 146:Core/Src/main.c **** 
 1041              		.loc 1 146 7 is_stmt 1 view .LVU271
 146:Core/Src/main.c **** 
 1042              		.loc 1 146 20 is_stmt 0 view .LVU272
 1043 00ec 1A64     		str	r2, [r3, #64]
 148:Core/Src/main.c **** 		  HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_2);
 1044              		.loc 1 148 7 is_stmt 1 view .LVU273
 1045 00ee 0E4C     		ldr	r4, .L63+20
 1046 00f0 0021     		movs	r1, #0
 1047 00f2 2046     		mov	r0, r4
 1048 00f4 FFF7FEFF 		bl	HAL_TIM_PWM_Stop
 1049              	.LVL68:
 149:Core/Src/main.c **** 		  HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_3);
 1050              		.loc 1 149 5 view .LVU274
 1051 00f8 0421     		movs	r1, #4
 1052 00fa 2046     		mov	r0, r4
 1053 00fc FFF7FEFF 		bl	HAL_TIM_PWM_Stop
 1054              	.LVL69:
 150:Core/Src/main.c **** 		  HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_4);
 1055              		.loc 1 150 5 view .LVU275
 1056 0100 0821     		movs	r1, #8
 1057 0102 2046     		mov	r0, r4
 1058 0104 FFF7FEFF 		bl	HAL_TIM_PWM_Stop
 1059              	.LVL70:
 151:Core/Src/main.c **** 
 1060              		.loc 1 151 5 view .LVU276
 1061 0108 0C21     		movs	r1, #12
 1062 010a 2046     		mov	r0, r4
 1063 010c FFF7FEFF 		bl	HAL_TIM_PWM_Stop
ARM GAS  /tmp/cctkHiNQ.s 			page 48


 1064              	.LVL71:
 1065 0110 D6E7     		b	.L57
 1066              	.L64:
 1067 0112 00BF     		.align	2
 1068              	.L63:
 1069 0114 00080240 		.word	1073874944
 1070 0118 00000000 		.word	.LANCHOR0
 1071 011c 00000000 		.word	huart1
 1072 0120 00000000 		.word	recvd_data
 1073 0124 00000000 		.word	data_buffer
 1074 0128 00000000 		.word	htim3
 1075 012c 00000140 		.word	1073807360
 1076 0130 00000000 		.word	.LANCHOR1
 1077 0134 00000240 		.word	1073872896
 1078 0138 00040040 		.word	1073742848
 1079              		.cfi_endproc
 1080              	.LFE134:
 1082              		.global	command_flag
 1083              		.global	count
 1084              		.comm	recvd_data,1,1
 1085              		.comm	data_buffer,100,4
 1086              		.comm	command,4,4
 1087              		.global	user_data
 1088              		.comm	hdma_usart1_tx,96,4
 1089              		.comm	hdma_usart1_rx,96,4
 1090              		.comm	huart1,72,4
 1091              		.comm	htim3,72,4
 1092              		.section	.bss.command_flag,"aw",%nobits
 1093              		.set	.LANCHOR1,. + 0
 1096              	command_flag:
 1097 0000 00       		.space	1
 1098              		.section	.bss.count,"aw",%nobits
 1099              		.align	2
 1100              		.set	.LANCHOR2,. + 0
 1103              	count:
 1104 0000 00000000 		.space	4
 1105              		.section	.data.user_data,"aw"
 1106              		.align	2
 1107              		.set	.LANCHOR0,. + 0
 1110              	user_data:
 1111 0000 00000000 		.word	.LC1
 1112              		.section	.rodata.HAL_UART_RxCpltCallback.str1.4,"aMS",%progbits,1
 1113              		.align	2
 1114              	.LC0:
 1115 0000 0D0A00   		.ascii	"\015\012\000"
 1116              		.section	.rodata.str1.4,"aMS",%progbits,1
 1117              		.align	2
 1118              	.LC1:
 1119 0000 54686520 		.ascii	"The application is running\015\012\000"
 1119      6170706C 
 1119      69636174 
 1119      696F6E20 
 1119      69732072 
 1120              		.text
 1121              	.Letext0:
 1122              		.file 3 "/usr/arm-none-eabi/include/machine/_default_types.h"
 1123              		.file 4 "/usr/arm-none-eabi/include/sys/_stdint.h"
ARM GAS  /tmp/cctkHiNQ.s 			page 49


 1124              		.file 5 "Drivers/CMSIS/Include/core_cm4.h"
 1125              		.file 6 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/system_stm32f4xx.h"
 1126              		.file 7 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/stm32f401xc.h"
 1127              		.file 8 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_def.h"
 1128              		.file 9 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_rcc_ex.h"
 1129              		.file 10 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_rcc.h"
 1130              		.file 11 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_gpio.h"
 1131              		.file 12 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_dma.h"
 1132              		.file 13 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_tim.h"
 1133              		.file 14 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_uart.h"
 1134              		.file 15 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal.h"
 1135              		.file 16 "/usr/lib/gcc/arm-none-eabi/8.3.1/include/stddef.h"
 1136              		.file 17 "/usr/arm-none-eabi/include/sys/_types.h"
 1137              		.file 18 "/usr/arm-none-eabi/include/sys/reent.h"
 1138              		.file 19 "/usr/arm-none-eabi/include/sys/lock.h"
 1139              		.file 20 "/usr/arm-none-eabi/include/string.h"
 1140              		.file 21 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_cortex.h"
 1141              		.file 22 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_tim_ex.h"
 1142              		.file 23 "Core/Inc/main.h"
 1143              		.file 24 "Core/Inc/command_line.h"
 1144              		.file 25 "<built-in>"
ARM GAS  /tmp/cctkHiNQ.s 			page 50


DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.c
     /tmp/cctkHiNQ.s:18     .text.MX_GPIO_Init:0000000000000000 $t
     /tmp/cctkHiNQ.s:25     .text.MX_GPIO_Init:0000000000000000 MX_GPIO_Init
     /tmp/cctkHiNQ.s:187    .text.MX_GPIO_Init:00000000000000bc $d
     /tmp/cctkHiNQ.s:195    .text.MX_DMA_Init:0000000000000000 $t
     /tmp/cctkHiNQ.s:201    .text.MX_DMA_Init:0000000000000000 MX_DMA_Init
     /tmp/cctkHiNQ.s:261    .text.MX_DMA_Init:0000000000000040 $d
     /tmp/cctkHiNQ.s:266    .text.HAL_UART_TxCpltCallback:0000000000000000 $t
     /tmp/cctkHiNQ.s:273    .text.HAL_UART_TxCpltCallback:0000000000000000 HAL_UART_TxCpltCallback
     /tmp/cctkHiNQ.s:304    .text.HAL_UART_TxCpltCallback:0000000000000018 $d
     /tmp/cctkHiNQ.s:309    .text.HAL_UART_RxCpltCallback:0000000000000000 $t
     /tmp/cctkHiNQ.s:316    .text.HAL_UART_RxCpltCallback:0000000000000000 HAL_UART_RxCpltCallback
     /tmp/cctkHiNQ.s:389    .text.HAL_UART_RxCpltCallback:0000000000000048 $d
                            *COM*:0000000000000001 recvd_data
                            *COM*:0000000000000064 data_buffer
                            *COM*:0000000000000048 huart1
     /tmp/cctkHiNQ.s:399    .text.Error_Handler:0000000000000000 $t
     /tmp/cctkHiNQ.s:406    .text.Error_Handler:0000000000000000 Error_Handler
     /tmp/cctkHiNQ.s:437    .text.MX_TIM3_Init:0000000000000000 $t
     /tmp/cctkHiNQ.s:443    .text.MX_TIM3_Init:0000000000000000 MX_TIM3_Init
     /tmp/cctkHiNQ.s:639    .text.MX_TIM3_Init:00000000000000d8 $d
                            *COM*:0000000000000048 htim3
     /tmp/cctkHiNQ.s:645    .text.MX_USART1_UART_Init:0000000000000000 $t
     /tmp/cctkHiNQ.s:651    .text.MX_USART1_UART_Init:0000000000000000 MX_USART1_UART_Init
     /tmp/cctkHiNQ.s:706    .text.MX_USART1_UART_Init:000000000000002c $d
     /tmp/cctkHiNQ.s:712    .text.SystemClock_Config:0000000000000000 $t
     /tmp/cctkHiNQ.s:719    .text.SystemClock_Config:0000000000000000 SystemClock_Config
     /tmp/cctkHiNQ.s:864    .text.SystemClock_Config:00000000000000a0 $d
     /tmp/cctkHiNQ.s:870    .text.main:0000000000000000 $t
     /tmp/cctkHiNQ.s:877    .text.main:0000000000000000 main
     /tmp/cctkHiNQ.s:1069   .text.main:0000000000000114 $d
     /tmp/cctkHiNQ.s:1096   .bss.command_flag:0000000000000000 command_flag
     /tmp/cctkHiNQ.s:1103   .bss.count:0000000000000000 count
                            *COM*:0000000000000004 command
     /tmp/cctkHiNQ.s:1110   .data.user_data:0000000000000000 user_data
                            *COM*:0000000000000060 hdma_usart1_tx
                            *COM*:0000000000000060 hdma_usart1_rx
     /tmp/cctkHiNQ.s:1097   .bss.command_flag:0000000000000000 $d
     /tmp/cctkHiNQ.s:1099   .bss.count:0000000000000000 $d
     /tmp/cctkHiNQ.s:1106   .data.user_data:0000000000000000 $d
     /tmp/cctkHiNQ.s:1113   .rodata.HAL_UART_RxCpltCallback.str1.4:0000000000000000 $d
     /tmp/cctkHiNQ.s:1117   .rodata.str1.4:0000000000000000 $d

UNDEFINED SYMBOLS
HAL_GPIO_WritePin
HAL_GPIO_Init
HAL_NVIC_SetPriority
HAL_NVIC_EnableIRQ
strlen
memset
HAL_UART_Transmit
HAL_UART_Receive_IT
HAL_TIM_Base_Init
HAL_TIM_ConfigClockSource
HAL_TIM_PWM_Init
HAL_TIMEx_MasterConfigSynchronization
ARM GAS  /tmp/cctkHiNQ.s 			page 51


HAL_TIM_PWM_ConfigChannel
HAL_TIM_MspPostInit
HAL_UART_Init
HAL_RCC_OscConfig
HAL_RCC_ClockConfig
HAL_Init
HAL_UART_Transmit_IT
Get_Command
HAL_Delay
HAL_TIM_PWM_Start
HAL_GPIO_ReadPin
HAL_TIM_PWM_Stop
